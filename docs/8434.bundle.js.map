{"version":3,"file":"8434.bundle.js","sources":["webpack://graph-diagram/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/base/common/extpath.js","webpack://graph-diagram/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/base/common/mime.js","webpack://graph-diagram/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/base/common/resources.js","webpack://graph-diagram/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/editor/common/languages/modesRegistry.js","webpack://graph-diagram/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/platform/configuration/common/configuration.js","webpack://graph-diagram/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js","webpack://graph-diagram/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation.js","webpack://graph-diagram/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/platform/jsonschemas/common/jsonContributionRegistry.js","webpack://graph-diagram/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/platform/registry/common/platform.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { posix, sep } from './path.js';\nimport { isWindows } from './platform.js';\nimport { startsWithIgnoreCase } from './strings.js';\nexport function isPathSeparator(code) {\n    return code === 47 /* CharCode.Slash */ || code === 92 /* CharCode.Backslash */;\n}\n/**\n * Takes a Windows OS path and changes backward slashes to forward slashes.\n * This should only be done for OS paths from Windows (or user provided paths potentially from Windows).\n * Using it on a Linux or MaxOS path might change it.\n */\nexport function toSlashes(osPath) {\n    return osPath.replace(/[\\\\/]/g, posix.sep);\n}\n/**\n * Takes a Windows OS path (using backward or forward slashes) and turns it into a posix path:\n * - turns backward slashes into forward slashes\n * - makes it absolute if it starts with a drive letter\n * This should only be done for OS paths from Windows (or user provided paths potentially from Windows).\n * Using it on a Linux or MaxOS path might change it.\n */\nexport function toPosixPath(osPath) {\n    if (osPath.indexOf('/') === -1) {\n        osPath = toSlashes(osPath);\n    }\n    if (/^[a-zA-Z]:(\\/|$)/.test(osPath)) { // starts with a drive letter\n        osPath = '/' + osPath;\n    }\n    return osPath;\n}\n/**\n * Computes the _root_ this path, like `getRoot('c:\\files') === c:\\`,\n * `getRoot('files:///files/path') === files:///`,\n * or `getRoot('\\\\server\\shares\\path') === \\\\server\\shares\\`\n */\nexport function getRoot(path, sep = posix.sep) {\n    if (!path) {\n        return '';\n    }\n    const len = path.length;\n    const firstLetter = path.charCodeAt(0);\n    if (isPathSeparator(firstLetter)) {\n        if (isPathSeparator(path.charCodeAt(1))) {\n            // UNC candidate \\\\localhost\\shares\\ddd\n            //               ^^^^^^^^^^^^^^^^^^^\n            if (!isPathSeparator(path.charCodeAt(2))) {\n                let pos = 3;\n                const start = pos;\n                for (; pos < len; pos++) {\n                    if (isPathSeparator(path.charCodeAt(pos))) {\n                        break;\n                    }\n                }\n                if (start !== pos && !isPathSeparator(path.charCodeAt(pos + 1))) {\n                    pos += 1;\n                    for (; pos < len; pos++) {\n                        if (isPathSeparator(path.charCodeAt(pos))) {\n                            return path.slice(0, pos + 1) // consume this separator\n                                .replace(/[\\\\/]/g, sep);\n                        }\n                    }\n                }\n            }\n        }\n        // /user/far\n        // ^\n        return sep;\n    }\n    else if (isWindowsDriveLetter(firstLetter)) {\n        // check for windows drive letter c:\\ or c:\n        if (path.charCodeAt(1) === 58 /* CharCode.Colon */) {\n            if (isPathSeparator(path.charCodeAt(2))) {\n                // C:\\fff\n                // ^^^\n                return path.slice(0, 2) + sep;\n            }\n            else {\n                // C:\n                // ^^\n                return path.slice(0, 2);\n            }\n        }\n    }\n    // check for URI\n    // scheme://authority/path\n    // ^^^^^^^^^^^^^^^^^^^\n    let pos = path.indexOf('://');\n    if (pos !== -1) {\n        pos += 3; // 3 -> \"://\".length\n        for (; pos < len; pos++) {\n            if (isPathSeparator(path.charCodeAt(pos))) {\n                return path.slice(0, pos + 1); // consume this separator\n            }\n        }\n    }\n    return '';\n}\n/**\n * @deprecated please use `IUriIdentityService.extUri.isEqualOrParent` instead. If\n * you are in a context without services, consider to pass down the `extUri` from the\n * outside, or use `extUriBiasedIgnorePathCase` if you know what you are doing.\n */\nexport function isEqualOrParent(base, parentCandidate, ignoreCase, separator = sep) {\n    if (base === parentCandidate) {\n        return true;\n    }\n    if (!base || !parentCandidate) {\n        return false;\n    }\n    if (parentCandidate.length > base.length) {\n        return false;\n    }\n    if (ignoreCase) {\n        const beginsWith = startsWithIgnoreCase(base, parentCandidate);\n        if (!beginsWith) {\n            return false;\n        }\n        if (parentCandidate.length === base.length) {\n            return true; // same path, different casing\n        }\n        let sepOffset = parentCandidate.length;\n        if (parentCandidate.charAt(parentCandidate.length - 1) === separator) {\n            sepOffset--; // adjust the expected sep offset in case our candidate already ends in separator character\n        }\n        return base.charAt(sepOffset) === separator;\n    }\n    if (parentCandidate.charAt(parentCandidate.length - 1) !== separator) {\n        parentCandidate += separator;\n    }\n    return base.indexOf(parentCandidate) === 0;\n}\nexport function isWindowsDriveLetter(char0) {\n    return char0 >= 65 /* CharCode.A */ && char0 <= 90 /* CharCode.Z */ || char0 >= 97 /* CharCode.a */ && char0 <= 122 /* CharCode.z */;\n}\nexport function hasDriveLetter(path, isWindowsOS = isWindows) {\n    if (isWindowsOS) {\n        return isWindowsDriveLetter(path.charCodeAt(0)) && path.charCodeAt(1) === 58 /* CharCode.Colon */;\n    }\n    return false;\n}\n","export const Mimes = Object.freeze({\n    text: 'text/plain',\n    binary: 'application/octet-stream',\n    unknown: 'application/unknown',\n    markdown: 'text/markdown',\n    latex: 'text/latex',\n    uriList: 'text/uri-list',\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as extpath from './extpath.js';\nimport { Schemas } from './network.js';\nimport * as paths from './path.js';\nimport { isLinux, isWindows } from './platform.js';\nimport { compare as strCompare, equalsIgnoreCase } from './strings.js';\nimport { URI, uriToFsPath } from './uri.js';\nexport function originalFSPath(uri) {\n    return uriToFsPath(uri, true);\n}\nexport class ExtUri {\n    constructor(_ignorePathCasing) {\n        this._ignorePathCasing = _ignorePathCasing;\n    }\n    compare(uri1, uri2, ignoreFragment = false) {\n        if (uri1 === uri2) {\n            return 0;\n        }\n        return strCompare(this.getComparisonKey(uri1, ignoreFragment), this.getComparisonKey(uri2, ignoreFragment));\n    }\n    isEqual(uri1, uri2, ignoreFragment = false) {\n        if (uri1 === uri2) {\n            return true;\n        }\n        if (!uri1 || !uri2) {\n            return false;\n        }\n        return this.getComparisonKey(uri1, ignoreFragment) === this.getComparisonKey(uri2, ignoreFragment);\n    }\n    getComparisonKey(uri, ignoreFragment = false) {\n        return uri.with({\n            path: this._ignorePathCasing(uri) ? uri.path.toLowerCase() : undefined,\n            fragment: ignoreFragment ? null : undefined\n        }).toString();\n    }\n    isEqualOrParent(base, parentCandidate, ignoreFragment = false) {\n        if (base.scheme === parentCandidate.scheme) {\n            if (base.scheme === Schemas.file) {\n                return extpath.isEqualOrParent(originalFSPath(base), originalFSPath(parentCandidate), this._ignorePathCasing(base)) && base.query === parentCandidate.query && (ignoreFragment || base.fragment === parentCandidate.fragment);\n            }\n            if (isEqualAuthority(base.authority, parentCandidate.authority)) {\n                return extpath.isEqualOrParent(base.path, parentCandidate.path, this._ignorePathCasing(base), '/') && base.query === parentCandidate.query && (ignoreFragment || base.fragment === parentCandidate.fragment);\n            }\n        }\n        return false;\n    }\n    // --- path math\n    joinPath(resource, ...pathFragment) {\n        return URI.joinPath(resource, ...pathFragment);\n    }\n    basenameOrAuthority(resource) {\n        return basename(resource) || resource.authority;\n    }\n    basename(resource) {\n        return paths.posix.basename(resource.path);\n    }\n    extname(resource) {\n        return paths.posix.extname(resource.path);\n    }\n    dirname(resource) {\n        if (resource.path.length === 0) {\n            return resource;\n        }\n        let dirname;\n        if (resource.scheme === Schemas.file) {\n            dirname = URI.file(paths.dirname(originalFSPath(resource))).path;\n        }\n        else {\n            dirname = paths.posix.dirname(resource.path);\n            if (resource.authority && dirname.length && dirname.charCodeAt(0) !== 47 /* CharCode.Slash */) {\n                console.error(`dirname(\"${resource.toString})) resulted in a relative path`);\n                dirname = '/'; // If a URI contains an authority component, then the path component must either be empty or begin with a CharCode.Slash (\"/\") character\n            }\n        }\n        return resource.with({\n            path: dirname\n        });\n    }\n    normalizePath(resource) {\n        if (!resource.path.length) {\n            return resource;\n        }\n        let normalizedPath;\n        if (resource.scheme === Schemas.file) {\n            normalizedPath = URI.file(paths.normalize(originalFSPath(resource))).path;\n        }\n        else {\n            normalizedPath = paths.posix.normalize(resource.path);\n        }\n        return resource.with({\n            path: normalizedPath\n        });\n    }\n    relativePath(from, to) {\n        if (from.scheme !== to.scheme || !isEqualAuthority(from.authority, to.authority)) {\n            return undefined;\n        }\n        if (from.scheme === Schemas.file) {\n            const relativePath = paths.relative(originalFSPath(from), originalFSPath(to));\n            return isWindows ? extpath.toSlashes(relativePath) : relativePath;\n        }\n        let fromPath = from.path || '/';\n        const toPath = to.path || '/';\n        if (this._ignorePathCasing(from)) {\n            // make casing of fromPath match toPath\n            let i = 0;\n            for (const len = Math.min(fromPath.length, toPath.length); i < len; i++) {\n                if (fromPath.charCodeAt(i) !== toPath.charCodeAt(i)) {\n                    if (fromPath.charAt(i).toLowerCase() !== toPath.charAt(i).toLowerCase()) {\n                        break;\n                    }\n                }\n            }\n            fromPath = toPath.substr(0, i) + fromPath.substr(i);\n        }\n        return paths.posix.relative(fromPath, toPath);\n    }\n    resolvePath(base, path) {\n        if (base.scheme === Schemas.file) {\n            const newURI = URI.file(paths.resolve(originalFSPath(base), path));\n            return base.with({\n                authority: newURI.authority,\n                path: newURI.path\n            });\n        }\n        path = extpath.toPosixPath(path); // we allow path to be a windows path\n        return base.with({\n            path: paths.posix.resolve(base.path, path)\n        });\n    }\n    // --- misc\n    isAbsolutePath(resource) {\n        return !!resource.path && resource.path[0] === '/';\n    }\n    isEqualAuthority(a1, a2) {\n        return a1 === a2 || (a1 !== undefined && a2 !== undefined && equalsIgnoreCase(a1, a2));\n    }\n    hasTrailingPathSeparator(resource, sep = paths.sep) {\n        if (resource.scheme === Schemas.file) {\n            const fsp = originalFSPath(resource);\n            return fsp.length > extpath.getRoot(fsp).length && fsp[fsp.length - 1] === sep;\n        }\n        else {\n            const p = resource.path;\n            return (p.length > 1 && p.charCodeAt(p.length - 1) === 47 /* CharCode.Slash */) && !(/^[a-zA-Z]:(\\/$|\\\\$)/.test(resource.fsPath)); // ignore the slash at offset 0\n        }\n    }\n    removeTrailingPathSeparator(resource, sep = paths.sep) {\n        // Make sure that the path isn't a drive letter. A trailing separator there is not removable.\n        if (hasTrailingPathSeparator(resource, sep)) {\n            return resource.with({ path: resource.path.substr(0, resource.path.length - 1) });\n        }\n        return resource;\n    }\n    addTrailingPathSeparator(resource, sep = paths.sep) {\n        let isRootSep = false;\n        if (resource.scheme === Schemas.file) {\n            const fsp = originalFSPath(resource);\n            isRootSep = ((fsp !== undefined) && (fsp.length === extpath.getRoot(fsp).length) && (fsp[fsp.length - 1] === sep));\n        }\n        else {\n            sep = '/';\n            const p = resource.path;\n            isRootSep = p.length === 1 && p.charCodeAt(p.length - 1) === 47 /* CharCode.Slash */;\n        }\n        if (!isRootSep && !hasTrailingPathSeparator(resource, sep)) {\n            return resource.with({ path: resource.path + '/' });\n        }\n        return resource;\n    }\n}\n/**\n * Unbiased utility that takes uris \"as they are\". This means it can be interchanged with\n * uri#toString() usages. The following is true\n * ```\n * assertEqual(aUri.toString() === bUri.toString(), exturi.isEqual(aUri, bUri))\n * ```\n */\nexport const extUri = new ExtUri(() => false);\n/**\n * BIASED utility that _mostly_ ignored the case of urs paths. ONLY use this util if you\n * understand what you are doing.\n *\n * This utility is INCOMPATIBLE with `uri.toString()`-usages and both CANNOT be used interchanged.\n *\n * When dealing with uris from files or documents, `extUri` (the unbiased friend)is sufficient\n * because those uris come from a \"trustworthy source\". When creating unknown uris it's always\n * better to use `IUriIdentityService` which exposes an `IExtUri`-instance which knows when path\n * casing matters.\n */\nexport const extUriBiasedIgnorePathCase = new ExtUri(uri => {\n    // A file scheme resource is in the same platform as code, so ignore case for non linux platforms\n    // Resource can be from another platform. Lowering the case as an hack. Should come from File system provider\n    return uri.scheme === Schemas.file ? !isLinux : true;\n});\n/**\n * BIASED utility that always ignores the casing of uris paths. ONLY use this util if you\n * understand what you are doing.\n *\n * This utility is INCOMPATIBLE with `uri.toString()`-usages and both CANNOT be used interchanged.\n *\n * When dealing with uris from files or documents, `extUri` (the unbiased friend)is sufficient\n * because those uris come from a \"trustworthy source\". When creating unknown uris it's always\n * better to use `IUriIdentityService` which exposes an `IExtUri`-instance which knows when path\n * casing matters.\n */\nexport const extUriIgnorePathCase = new ExtUri(_ => true);\nexport const isEqual = extUri.isEqual.bind(extUri);\nexport const isEqualOrParent = extUri.isEqualOrParent.bind(extUri);\nexport const getComparisonKey = extUri.getComparisonKey.bind(extUri);\nexport const basenameOrAuthority = extUri.basenameOrAuthority.bind(extUri);\nexport const basename = extUri.basename.bind(extUri);\nexport const extname = extUri.extname.bind(extUri);\nexport const dirname = extUri.dirname.bind(extUri);\nexport const joinPath = extUri.joinPath.bind(extUri);\nexport const normalizePath = extUri.normalizePath.bind(extUri);\nexport const relativePath = extUri.relativePath.bind(extUri);\nexport const resolvePath = extUri.resolvePath.bind(extUri);\nexport const isAbsolutePath = extUri.isAbsolutePath.bind(extUri);\nexport const isEqualAuthority = extUri.isEqualAuthority.bind(extUri);\nexport const hasTrailingPathSeparator = extUri.hasTrailingPathSeparator.bind(extUri);\nexport const removeTrailingPathSeparator = extUri.removeTrailingPathSeparator.bind(extUri);\nexport const addTrailingPathSeparator = extUri.addTrailingPathSeparator.bind(extUri);\n/**\n * Data URI related helpers.\n */\nexport var DataUri;\n(function (DataUri) {\n    DataUri.META_DATA_LABEL = 'label';\n    DataUri.META_DATA_DESCRIPTION = 'description';\n    DataUri.META_DATA_SIZE = 'size';\n    DataUri.META_DATA_MIME = 'mime';\n    function parseMetaData(dataUri) {\n        const metadata = new Map();\n        // Given a URI of:  data:image/png;size:2313;label:SomeLabel;description:SomeDescription;base64,77+9UE5...\n        // the metadata is: size:2313;label:SomeLabel;description:SomeDescription\n        const meta = dataUri.path.substring(dataUri.path.indexOf(';') + 1, dataUri.path.lastIndexOf(';'));\n        meta.split(';').forEach(property => {\n            const [key, value] = property.split(':');\n            if (key && value) {\n                metadata.set(key, value);\n            }\n        });\n        // Given a URI of:  data:image/png;size:2313;label:SomeLabel;description:SomeDescription;base64,77+9UE5...\n        // the mime is: image/png\n        const mime = dataUri.path.substring(0, dataUri.path.indexOf(';'));\n        if (mime) {\n            metadata.set(DataUri.META_DATA_MIME, mime);\n        }\n        return metadata;\n    }\n    DataUri.parseMetaData = parseMetaData;\n})(DataUri || (DataUri = {}));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nimport { Mimes } from '../../../base/common/mime.js';\nimport { Extensions as ConfigurationExtensions } from '../../../platform/configuration/common/configurationRegistry.js';\n// Define extension point ids\nexport const Extensions = {\n    ModesRegistry: 'editor.modesRegistry'\n};\nexport class EditorModesRegistry {\n    constructor() {\n        this._onDidChangeLanguages = new Emitter();\n        this.onDidChangeLanguages = this._onDidChangeLanguages.event;\n        this._languages = [];\n    }\n    registerLanguage(def) {\n        this._languages.push(def);\n        this._onDidChangeLanguages.fire(undefined);\n        return {\n            dispose: () => {\n                for (let i = 0, len = this._languages.length; i < len; i++) {\n                    if (this._languages[i] === def) {\n                        this._languages.splice(i, 1);\n                        return;\n                    }\n                }\n            }\n        };\n    }\n    getLanguages() {\n        return this._languages;\n    }\n}\nexport const ModesRegistry = new EditorModesRegistry();\nRegistry.add(Extensions.ModesRegistry, ModesRegistry);\nexport const PLAINTEXT_LANGUAGE_ID = 'plaintext';\nexport const PLAINTEXT_EXTENSION = '.txt';\nModesRegistry.registerLanguage({\n    id: PLAINTEXT_LANGUAGE_ID,\n    extensions: [PLAINTEXT_EXTENSION],\n    aliases: [nls.localize('plainText.alias', \"Plain Text\"), 'text'],\n    mimetypes: [Mimes.text]\n});\nRegistry.as(ConfigurationExtensions.Configuration)\n    .registerDefaultConfigurations([{\n        overrides: {\n            '[plaintext]': {\n                'editor.unicodeHighlight.ambiguousCharacters': false,\n                'editor.unicodeHighlight.invisibleCharacters': false\n            }\n        }\n    }]);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const IConfigurationService = createDecorator('configurationService');\nexport function toValuesTree(properties, conflictReporter) {\n    const root = Object.create(null);\n    for (const key in properties) {\n        addToValueTree(root, key, properties[key], conflictReporter);\n    }\n    return root;\n}\nexport function addToValueTree(settingsTreeRoot, key, value, conflictReporter) {\n    const segments = key.split('.');\n    const last = segments.pop();\n    let curr = settingsTreeRoot;\n    for (let i = 0; i < segments.length; i++) {\n        const s = segments[i];\n        let obj = curr[s];\n        switch (typeof obj) {\n            case 'undefined':\n                obj = curr[s] = Object.create(null);\n                break;\n            case 'object':\n                if (obj === null) {\n                    conflictReporter(`Ignoring ${key} as ${segments.slice(0, i + 1).join('.')} is null`);\n                    return;\n                }\n                break;\n            default:\n                conflictReporter(`Ignoring ${key} as ${segments.slice(0, i + 1).join('.')} is ${JSON.stringify(obj)}`);\n                return;\n        }\n        curr = obj;\n    }\n    if (typeof curr === 'object' && curr !== null) {\n        try {\n            curr[last] = value; // workaround https://github.com/microsoft/vscode/issues/13606\n        }\n        catch (e) {\n            conflictReporter(`Ignoring ${key} as ${segments.join('.')} is ${JSON.stringify(curr)}`);\n        }\n    }\n    else {\n        conflictReporter(`Ignoring ${key} as ${segments.join('.')} is ${JSON.stringify(curr)}`);\n    }\n}\nexport function removeFromValueTree(valueTree, key) {\n    const segments = key.split('.');\n    doRemoveFromValueTree(valueTree, segments);\n}\nfunction doRemoveFromValueTree(valueTree, segments) {\n    const first = segments.shift();\n    if (segments.length === 0) {\n        // Reached last segment\n        delete valueTree[first];\n        return;\n    }\n    if (Object.keys(valueTree).indexOf(first) !== -1) {\n        const value = valueTree[first];\n        if (typeof value === 'object' && !Array.isArray(value)) {\n            doRemoveFromValueTree(value, segments);\n            if (Object.keys(value).length === 0) {\n                delete valueTree[first];\n            }\n        }\n    }\n}\n/**\n * A helper function to get the configuration value with a specific settings path (e.g. config.some.setting)\n */\nexport function getConfigurationValue(config, settingPath, defaultValue) {\n    function accessSetting(config, path) {\n        let current = config;\n        for (const component of path) {\n            if (typeof current !== 'object' || current === null) {\n                return undefined;\n            }\n            current = current[component];\n        }\n        return current;\n    }\n    const path = settingPath.split('.');\n    const result = accessSetting(config, path);\n    return typeof result === 'undefined' ? defaultValue : result;\n}\nexport function getLanguageTagSettingPlainKey(settingKey) {\n    return settingKey.replace(/[\\[\\]]/g, '');\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { distinct } from '../../../base/common/arrays.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport * as types from '../../../base/common/types.js';\nimport * as nls from '../../../nls.js';\nimport { getLanguageTagSettingPlainKey } from './configuration.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport { Registry } from '../../registry/common/platform.js';\nexport const Extensions = {\n    Configuration: 'base.contributions.configuration'\n};\nexport const allSettings = { properties: {}, patternProperties: {} };\nexport const applicationSettings = { properties: {}, patternProperties: {} };\nexport const machineSettings = { properties: {}, patternProperties: {} };\nexport const machineOverridableSettings = { properties: {}, patternProperties: {} };\nexport const windowSettings = { properties: {}, patternProperties: {} };\nexport const resourceSettings = { properties: {}, patternProperties: {} };\nexport const resourceLanguageSettingsSchemaId = 'vscode://schemas/settings/resourceLanguage';\nconst contributionRegistry = Registry.as(JSONExtensions.JSONContribution);\nclass ConfigurationRegistry {\n    constructor() {\n        this.registeredConfigurationDefaults = [];\n        this.overrideIdentifiers = new Set();\n        this._onDidSchemaChange = new Emitter();\n        this._onDidUpdateConfiguration = new Emitter();\n        this.configurationDefaultsOverrides = new Map();\n        this.defaultLanguageConfigurationOverridesNode = {\n            id: 'defaultOverrides',\n            title: nls.localize('defaultLanguageConfigurationOverrides.title', \"Default Language Configuration Overrides\"),\n            properties: {}\n        };\n        this.configurationContributors = [this.defaultLanguageConfigurationOverridesNode];\n        this.resourceLanguageSettingsSchema = {\n            properties: {},\n            patternProperties: {},\n            additionalProperties: true,\n            allowTrailingCommas: true,\n            allowComments: true\n        };\n        this.configurationProperties = {};\n        this.policyConfigurations = new Map();\n        this.excludedConfigurationProperties = {};\n        contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n        this.registerOverridePropertyPatternKey();\n    }\n    registerConfiguration(configuration, validate = true) {\n        this.registerConfigurations([configuration], validate);\n    }\n    registerConfigurations(configurations, validate = true) {\n        const properties = new Set();\n        this.doRegisterConfigurations(configurations, validate, properties);\n        contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n        this._onDidSchemaChange.fire();\n        this._onDidUpdateConfiguration.fire({ properties });\n    }\n    registerDefaultConfigurations(configurationDefaults) {\n        const properties = new Set();\n        this.doRegisterDefaultConfigurations(configurationDefaults, properties);\n        this._onDidSchemaChange.fire();\n        this._onDidUpdateConfiguration.fire({ properties, defaultsOverrides: true });\n    }\n    doRegisterDefaultConfigurations(configurationDefaults, bucket) {\n        this.registeredConfigurationDefaults.push(...configurationDefaults);\n        const overrideIdentifiers = [];\n        for (const { overrides, source } of configurationDefaults) {\n            for (const key in overrides) {\n                bucket.add(key);\n                const configurationDefaultOverridesForKey = this.configurationDefaultsOverrides.get(key)\n                    ?? this.configurationDefaultsOverrides.set(key, { configurationDefaultOverrides: [] }).get(key);\n                const value = overrides[key];\n                configurationDefaultOverridesForKey.configurationDefaultOverrides.push({ value, source });\n                // Configuration defaults for Override Identifiers\n                if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n                    const newDefaultOverride = this.mergeDefaultConfigurationsForOverrideIdentifier(key, value, source, configurationDefaultOverridesForKey.configurationDefaultOverrideValue);\n                    if (!newDefaultOverride) {\n                        continue;\n                    }\n                    configurationDefaultOverridesForKey.configurationDefaultOverrideValue = newDefaultOverride;\n                    this.updateDefaultOverrideProperty(key, newDefaultOverride, source);\n                    overrideIdentifiers.push(...overrideIdentifiersFromKey(key));\n                }\n                // Configuration defaults for Configuration Properties\n                else {\n                    const newDefaultOverride = this.mergeDefaultConfigurationsForConfigurationProperty(key, value, source, configurationDefaultOverridesForKey.configurationDefaultOverrideValue);\n                    if (!newDefaultOverride) {\n                        continue;\n                    }\n                    configurationDefaultOverridesForKey.configurationDefaultOverrideValue = newDefaultOverride;\n                    const property = this.configurationProperties[key];\n                    if (property) {\n                        this.updatePropertyDefaultValue(key, property);\n                        this.updateSchema(key, property);\n                    }\n                }\n            }\n        }\n        this.doRegisterOverrideIdentifiers(overrideIdentifiers);\n    }\n    updateDefaultOverrideProperty(key, newDefaultOverride, source) {\n        const property = {\n            type: 'object',\n            default: newDefaultOverride.value,\n            description: nls.localize('defaultLanguageConfiguration.description', \"Configure settings to be overridden for the {0} language.\", getLanguageTagSettingPlainKey(key)),\n            $ref: resourceLanguageSettingsSchemaId,\n            defaultDefaultValue: newDefaultOverride.value,\n            source,\n            defaultValueSource: source\n        };\n        this.configurationProperties[key] = property;\n        this.defaultLanguageConfigurationOverridesNode.properties[key] = property;\n    }\n    mergeDefaultConfigurationsForOverrideIdentifier(overrideIdentifier, configurationValueObject, valueSource, existingDefaultOverride) {\n        const defaultValue = existingDefaultOverride?.value || {};\n        const source = existingDefaultOverride?.source ?? new Map();\n        // This should not happen\n        if (!(source instanceof Map)) {\n            console.error('objectConfigurationSources is not a Map');\n            return undefined;\n        }\n        for (const propertyKey of Object.keys(configurationValueObject)) {\n            const propertyDefaultValue = configurationValueObject[propertyKey];\n            const isObjectSetting = types.isObject(propertyDefaultValue) &&\n                (types.isUndefined(defaultValue[propertyKey]) || types.isObject(defaultValue[propertyKey]));\n            // If the default value is an object, merge the objects and store the source of each keys\n            if (isObjectSetting) {\n                defaultValue[propertyKey] = { ...(defaultValue[propertyKey] ?? {}), ...propertyDefaultValue };\n                // Track the source of each value in the object\n                if (valueSource) {\n                    for (const objectKey in propertyDefaultValue) {\n                        source.set(`${propertyKey}.${objectKey}`, valueSource);\n                    }\n                }\n            }\n            // Primitive values are overridden\n            else {\n                defaultValue[propertyKey] = propertyDefaultValue;\n                if (valueSource) {\n                    source.set(propertyKey, valueSource);\n                }\n                else {\n                    source.delete(propertyKey);\n                }\n            }\n        }\n        return { value: defaultValue, source };\n    }\n    mergeDefaultConfigurationsForConfigurationProperty(propertyKey, value, valuesSource, existingDefaultOverride) {\n        const property = this.configurationProperties[propertyKey];\n        const existingDefaultValue = existingDefaultOverride?.value ?? property?.defaultDefaultValue;\n        let source = valuesSource;\n        const isObjectSetting = types.isObject(value) &&\n            (property !== undefined && property.type === 'object' ||\n                property === undefined && (types.isUndefined(existingDefaultValue) || types.isObject(existingDefaultValue)));\n        // If the default value is an object, merge the objects and store the source of each keys\n        if (isObjectSetting) {\n            source = existingDefaultOverride?.source ?? new Map();\n            // This should not happen\n            if (!(source instanceof Map)) {\n                console.error('defaultValueSource is not a Map');\n                return undefined;\n            }\n            for (const objectKey in value) {\n                if (valuesSource) {\n                    source.set(`${propertyKey}.${objectKey}`, valuesSource);\n                }\n            }\n            value = { ...(types.isObject(existingDefaultValue) ? existingDefaultValue : {}), ...value };\n        }\n        return { value, source };\n    }\n    registerOverrideIdentifiers(overrideIdentifiers) {\n        this.doRegisterOverrideIdentifiers(overrideIdentifiers);\n        this._onDidSchemaChange.fire();\n    }\n    doRegisterOverrideIdentifiers(overrideIdentifiers) {\n        for (const overrideIdentifier of overrideIdentifiers) {\n            this.overrideIdentifiers.add(overrideIdentifier);\n        }\n        this.updateOverridePropertyPatternKey();\n    }\n    doRegisterConfigurations(configurations, validate, bucket) {\n        configurations.forEach(configuration => {\n            this.validateAndRegisterProperties(configuration, validate, configuration.extensionInfo, configuration.restrictedProperties, undefined, bucket);\n            this.configurationContributors.push(configuration);\n            this.registerJSONConfiguration(configuration);\n        });\n    }\n    validateAndRegisterProperties(configuration, validate = true, extensionInfo, restrictedProperties, scope = 3 /* ConfigurationScope.WINDOW */, bucket) {\n        scope = types.isUndefinedOrNull(configuration.scope) ? scope : configuration.scope;\n        const properties = configuration.properties;\n        if (properties) {\n            for (const key in properties) {\n                const property = properties[key];\n                if (validate && validateProperty(key, property)) {\n                    delete properties[key];\n                    continue;\n                }\n                property.source = extensionInfo;\n                // update default value\n                property.defaultDefaultValue = properties[key].default;\n                this.updatePropertyDefaultValue(key, property);\n                // update scope\n                if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n                    property.scope = undefined; // No scope for overridable properties `[${identifier}]`\n                }\n                else {\n                    property.scope = types.isUndefinedOrNull(property.scope) ? scope : property.scope;\n                    property.restricted = types.isUndefinedOrNull(property.restricted) ? !!restrictedProperties?.includes(key) : property.restricted;\n                }\n                // Add to properties maps\n                // Property is included by default if 'included' is unspecified\n                if (properties[key].hasOwnProperty('included') && !properties[key].included) {\n                    this.excludedConfigurationProperties[key] = properties[key];\n                    delete properties[key];\n                    continue;\n                }\n                else {\n                    this.configurationProperties[key] = properties[key];\n                    if (properties[key].policy?.name) {\n                        this.policyConfigurations.set(properties[key].policy.name, key);\n                    }\n                }\n                if (!properties[key].deprecationMessage && properties[key].markdownDeprecationMessage) {\n                    // If not set, default deprecationMessage to the markdown source\n                    properties[key].deprecationMessage = properties[key].markdownDeprecationMessage;\n                }\n                bucket.add(key);\n            }\n        }\n        const subNodes = configuration.allOf;\n        if (subNodes) {\n            for (const node of subNodes) {\n                this.validateAndRegisterProperties(node, validate, extensionInfo, restrictedProperties, scope, bucket);\n            }\n        }\n    }\n    getConfigurationProperties() {\n        return this.configurationProperties;\n    }\n    getPolicyConfigurations() {\n        return this.policyConfigurations;\n    }\n    registerJSONConfiguration(configuration) {\n        const register = (configuration) => {\n            const properties = configuration.properties;\n            if (properties) {\n                for (const key in properties) {\n                    this.updateSchema(key, properties[key]);\n                }\n            }\n            const subNodes = configuration.allOf;\n            subNodes?.forEach(register);\n        };\n        register(configuration);\n    }\n    updateSchema(key, property) {\n        allSettings.properties[key] = property;\n        switch (property.scope) {\n            case 1 /* ConfigurationScope.APPLICATION */:\n                applicationSettings.properties[key] = property;\n                break;\n            case 2 /* ConfigurationScope.MACHINE */:\n                machineSettings.properties[key] = property;\n                break;\n            case 6 /* ConfigurationScope.MACHINE_OVERRIDABLE */:\n                machineOverridableSettings.properties[key] = property;\n                break;\n            case 3 /* ConfigurationScope.WINDOW */:\n                windowSettings.properties[key] = property;\n                break;\n            case 4 /* ConfigurationScope.RESOURCE */:\n                resourceSettings.properties[key] = property;\n                break;\n            case 5 /* ConfigurationScope.LANGUAGE_OVERRIDABLE */:\n                resourceSettings.properties[key] = property;\n                this.resourceLanguageSettingsSchema.properties[key] = property;\n                break;\n        }\n    }\n    updateOverridePropertyPatternKey() {\n        for (const overrideIdentifier of this.overrideIdentifiers.values()) {\n            const overrideIdentifierProperty = `[${overrideIdentifier}]`;\n            const resourceLanguagePropertiesSchema = {\n                type: 'object',\n                description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n                errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n                $ref: resourceLanguageSettingsSchemaId,\n            };\n            this.updatePropertyDefaultValue(overrideIdentifierProperty, resourceLanguagePropertiesSchema);\n            allSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            applicationSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            machineSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            machineOverridableSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            windowSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            resourceSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n        }\n    }\n    registerOverridePropertyPatternKey() {\n        const resourceLanguagePropertiesSchema = {\n            type: 'object',\n            description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n            errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n            $ref: resourceLanguageSettingsSchemaId,\n        };\n        allSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        applicationSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        machineSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        machineOverridableSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        windowSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        resourceSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        this._onDidSchemaChange.fire();\n    }\n    updatePropertyDefaultValue(key, property) {\n        const configurationdefaultOverride = this.configurationDefaultsOverrides.get(key)?.configurationDefaultOverrideValue;\n        let defaultValue = undefined;\n        let defaultSource = undefined;\n        if (configurationdefaultOverride\n            && (!property.disallowConfigurationDefault || !configurationdefaultOverride.source) // Prevent overriding the default value if the property is disallowed to be overridden by configuration defaults from extensions\n        ) {\n            defaultValue = configurationdefaultOverride.value;\n            defaultSource = configurationdefaultOverride.source;\n        }\n        if (types.isUndefined(defaultValue)) {\n            defaultValue = property.defaultDefaultValue;\n            defaultSource = undefined;\n        }\n        if (types.isUndefined(defaultValue)) {\n            defaultValue = getDefaultValue(property.type);\n        }\n        property.default = defaultValue;\n        property.defaultValueSource = defaultSource;\n    }\n}\nconst OVERRIDE_IDENTIFIER_PATTERN = `\\\\[([^\\\\]]+)\\\\]`;\nconst OVERRIDE_IDENTIFIER_REGEX = new RegExp(OVERRIDE_IDENTIFIER_PATTERN, 'g');\nexport const OVERRIDE_PROPERTY_PATTERN = `^(${OVERRIDE_IDENTIFIER_PATTERN})+$`;\nexport const OVERRIDE_PROPERTY_REGEX = new RegExp(OVERRIDE_PROPERTY_PATTERN);\nexport function overrideIdentifiersFromKey(key) {\n    const identifiers = [];\n    if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n        let matches = OVERRIDE_IDENTIFIER_REGEX.exec(key);\n        while (matches?.length) {\n            const identifier = matches[1].trim();\n            if (identifier) {\n                identifiers.push(identifier);\n            }\n            matches = OVERRIDE_IDENTIFIER_REGEX.exec(key);\n        }\n    }\n    return distinct(identifiers);\n}\nexport function getDefaultValue(type) {\n    const t = Array.isArray(type) ? type[0] : type;\n    switch (t) {\n        case 'boolean':\n            return false;\n        case 'integer':\n        case 'number':\n            return 0;\n        case 'string':\n            return '';\n        case 'array':\n            return [];\n        case 'object':\n            return {};\n        default:\n            return null;\n    }\n}\nconst configurationRegistry = new ConfigurationRegistry();\nRegistry.add(Extensions.Configuration, configurationRegistry);\nexport function validateProperty(property, schema) {\n    if (!property.trim()) {\n        return nls.localize('config.property.empty', \"Cannot register an empty property\");\n    }\n    if (OVERRIDE_PROPERTY_REGEX.test(property)) {\n        return nls.localize('config.property.languageDefault', \"Cannot register '{0}'. This matches property pattern '\\\\\\\\[.*\\\\\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.\", property);\n    }\n    if (configurationRegistry.getConfigurationProperties()[property] !== undefined) {\n        return nls.localize('config.property.duplicate', \"Cannot register '{0}'. This property is already registered.\", property);\n    }\n    if (schema.policy?.name && configurationRegistry.getPolicyConfigurations().get(schema.policy?.name) !== undefined) {\n        return nls.localize('config.policy.duplicate', \"Cannot register '{0}'. The associated policy {1} is already registered with {2}.\", property, schema.policy?.name, configurationRegistry.getPolicyConfigurations().get(schema.policy?.name));\n    }\n    return null;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// ------ internal util\nexport var _util;\n(function (_util) {\n    _util.serviceIds = new Map();\n    _util.DI_TARGET = '$di$target';\n    _util.DI_DEPENDENCIES = '$di$dependencies';\n    function getServiceDependencies(ctor) {\n        return ctor[_util.DI_DEPENDENCIES] || [];\n    }\n    _util.getServiceDependencies = getServiceDependencies;\n})(_util || (_util = {}));\nexport const IInstantiationService = createDecorator('instantiationService');\nfunction storeServiceDependency(id, target, index) {\n    if (target[_util.DI_TARGET] === target) {\n        target[_util.DI_DEPENDENCIES].push({ id, index });\n    }\n    else {\n        target[_util.DI_DEPENDENCIES] = [{ id, index }];\n        target[_util.DI_TARGET] = target;\n    }\n}\n/**\n * The *only* valid way to create a {{ServiceIdentifier}}.\n */\nexport function createDecorator(serviceId) {\n    if (_util.serviceIds.has(serviceId)) {\n        return _util.serviceIds.get(serviceId);\n    }\n    const id = function (target, key, index) {\n        if (arguments.length !== 3) {\n            throw new Error('@IServiceName-decorator can only be used to decorate a parameter');\n        }\n        storeServiceDependency(id, target, index);\n    };\n    id.toString = () => serviceId;\n    _util.serviceIds.set(serviceId, id);\n    return id;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport * as platform from '../../registry/common/platform.js';\nexport const Extensions = {\n    JSONContribution: 'base.contributions.json'\n};\nfunction normalizeId(id) {\n    if (id.length > 0 && id.charAt(id.length - 1) === '#') {\n        return id.substring(0, id.length - 1);\n    }\n    return id;\n}\nclass JSONContributionRegistry {\n    constructor() {\n        this._onDidChangeSchema = new Emitter();\n        this.schemasById = {};\n    }\n    registerSchema(uri, unresolvedSchemaContent) {\n        this.schemasById[normalizeId(uri)] = unresolvedSchemaContent;\n        this._onDidChangeSchema.fire(uri);\n    }\n    notifySchemaChanged(uri) {\n        this._onDidChangeSchema.fire(uri);\n    }\n}\nconst jsonContributionRegistry = new JSONContributionRegistry();\nplatform.Registry.add(Extensions.JSONContribution, jsonContributionRegistry);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as Assert from '../../../base/common/assert.js';\nimport * as Types from '../../../base/common/types.js';\nclass RegistryImpl {\n    constructor() {\n        this.data = new Map();\n    }\n    add(id, data) {\n        Assert.ok(Types.isString(id));\n        Assert.ok(Types.isObject(data));\n        Assert.ok(!this.data.has(id), 'There is already an extension with this id');\n        this.data.set(id, data);\n    }\n    as(id) {\n        return this.data.get(id) || null;\n    }\n}\nexport const Registry = new RegistryImpl();\n"],"names":["Object","console","t","r","Math","Map","a","JSON","e","Array","RegExp","i","Set","s","arguments","Error"],"mappings":"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"}