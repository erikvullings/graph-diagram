{"version":3,"file":"5814.bundle.js","sources":["webpack://graph-diagram/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/editor/common/services/languagesAssociations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { parse } from '../../../base/common/glob.js';\nimport { Mimes } from '../../../base/common/mime.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { basename, posix } from '../../../base/common/path.js';\nimport { DataUri } from '../../../base/common/resources.js';\nimport { startsWithUTF8BOM } from '../../../base/common/strings.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nlet registeredAssociations = [];\nlet nonUserRegisteredAssociations = [];\nlet userRegisteredAssociations = [];\n/**\n * Associate a language to the registry (platform).\n * * **NOTE**: This association will lose over associations registered using `registerConfiguredLanguageAssociation`.\n * * **NOTE**: Use `clearPlatformLanguageAssociations` to remove all associations registered using this function.\n */\nexport function registerPlatformLanguageAssociation(association, warnOnOverwrite = false) {\n    _registerLanguageAssociation(association, false, warnOnOverwrite);\n}\nfunction _registerLanguageAssociation(association, userConfigured, warnOnOverwrite) {\n    // Register\n    const associationItem = toLanguageAssociationItem(association, userConfigured);\n    registeredAssociations.push(associationItem);\n    if (!associationItem.userConfigured) {\n        nonUserRegisteredAssociations.push(associationItem);\n    }\n    else {\n        userRegisteredAssociations.push(associationItem);\n    }\n    // Check for conflicts unless this is a user configured association\n    if (warnOnOverwrite && !associationItem.userConfigured) {\n        registeredAssociations.forEach(a => {\n            if (a.mime === associationItem.mime || a.userConfigured) {\n                return; // same mime or userConfigured is ok\n            }\n            if (associationItem.extension && a.extension === associationItem.extension) {\n                console.warn(`Overwriting extension <<${associationItem.extension}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.filename && a.filename === associationItem.filename) {\n                console.warn(`Overwriting filename <<${associationItem.filename}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.filepattern && a.filepattern === associationItem.filepattern) {\n                console.warn(`Overwriting filepattern <<${associationItem.filepattern}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.firstline && a.firstline === associationItem.firstline) {\n                console.warn(`Overwriting firstline <<${associationItem.firstline}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n        });\n    }\n}\nfunction toLanguageAssociationItem(association, userConfigured) {\n    return {\n        id: association.id,\n        mime: association.mime,\n        filename: association.filename,\n        extension: association.extension,\n        filepattern: association.filepattern,\n        firstline: association.firstline,\n        userConfigured: userConfigured,\n        filenameLowercase: association.filename ? association.filename.toLowerCase() : undefined,\n        extensionLowercase: association.extension ? association.extension.toLowerCase() : undefined,\n        filepatternLowercase: association.filepattern ? parse(association.filepattern.toLowerCase()) : undefined,\n        filepatternOnPath: association.filepattern ? association.filepattern.indexOf(posix.sep) >= 0 : false\n    };\n}\n/**\n * Clear language associations from the registry (platform).\n */\nexport function clearPlatformLanguageAssociations() {\n    registeredAssociations = registeredAssociations.filter(a => a.userConfigured);\n    nonUserRegisteredAssociations = [];\n}\n/**\n * @see `getMimeTypes`\n */\nexport function getLanguageIds(resource, firstLine) {\n    return getAssociations(resource, firstLine).map(item => item.id);\n}\nfunction getAssociations(resource, firstLine) {\n    let path;\n    if (resource) {\n        switch (resource.scheme) {\n            case Schemas.file:\n                path = resource.fsPath;\n                break;\n            case Schemas.data: {\n                const metadata = DataUri.parseMetaData(resource);\n                path = metadata.get(DataUri.META_DATA_LABEL);\n                break;\n            }\n            case Schemas.vscodeNotebookCell:\n                // File path not relevant for language detection of cell\n                path = undefined;\n                break;\n            default:\n                path = resource.path;\n        }\n    }\n    if (!path) {\n        return [{ id: 'unknown', mime: Mimes.unknown }];\n    }\n    path = path.toLowerCase();\n    const filename = basename(path);\n    // 1.) User configured mappings have highest priority\n    const configuredLanguage = getAssociationByPath(path, filename, userRegisteredAssociations);\n    if (configuredLanguage) {\n        return [configuredLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n    }\n    // 2.) Registered mappings have middle priority\n    const registeredLanguage = getAssociationByPath(path, filename, nonUserRegisteredAssociations);\n    if (registeredLanguage) {\n        return [registeredLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n    }\n    // 3.) Firstline has lowest priority\n    if (firstLine) {\n        const firstlineLanguage = getAssociationByFirstline(firstLine);\n        if (firstlineLanguage) {\n            return [firstlineLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n        }\n    }\n    return [{ id: 'unknown', mime: Mimes.unknown }];\n}\nfunction getAssociationByPath(path, filename, associations) {\n    let filenameMatch = undefined;\n    let patternMatch = undefined;\n    let extensionMatch = undefined;\n    // We want to prioritize associations based on the order they are registered so that the last registered\n    // association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n    for (let i = associations.length - 1; i >= 0; i--) {\n        const association = associations[i];\n        // First exact name match\n        if (filename === association.filenameLowercase) {\n            filenameMatch = association;\n            break; // take it!\n        }\n        // Longest pattern match\n        if (association.filepattern) {\n            if (!patternMatch || association.filepattern.length > patternMatch.filepattern.length) {\n                const target = association.filepatternOnPath ? path : filename; // match on full path if pattern contains path separator\n                if (association.filepatternLowercase?.(target)) {\n                    patternMatch = association;\n                }\n            }\n        }\n        // Longest extension match\n        if (association.extension) {\n            if (!extensionMatch || association.extension.length > extensionMatch.extension.length) {\n                if (filename.endsWith(association.extensionLowercase)) {\n                    extensionMatch = association;\n                }\n            }\n        }\n    }\n    // 1.) Exact name match has second highest priority\n    if (filenameMatch) {\n        return filenameMatch;\n    }\n    // 2.) Match on pattern\n    if (patternMatch) {\n        return patternMatch;\n    }\n    // 3.) Match on extension comes next\n    if (extensionMatch) {\n        return extensionMatch;\n    }\n    return undefined;\n}\nfunction getAssociationByFirstline(firstLine) {\n    if (startsWithUTF8BOM(firstLine)) {\n        firstLine = firstLine.substr(1);\n    }\n    if (firstLine.length > 0) {\n        // We want to prioritize associations based on the order they are registered so that the last registered\n        // association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n        for (let i = registeredAssociations.length - 1; i >= 0; i--) {\n            const association = registeredAssociations[i];\n            if (!association.firstline) {\n                continue;\n            }\n            const matches = firstLine.match(association.firstline);\n            if (matches && matches.length > 0) {\n                return association;\n            }\n        }\n    }\n    return undefined;\n}\n"],"names":["console","t"],"mappings":"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"}