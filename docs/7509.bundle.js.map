{"version":3,"file":"7509.bundle.js","sources":["webpack://graph-diagram/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/editor/common/core/editorColorRegistry.js","webpack://graph-diagram/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/platform/theme/common/colors/baseColors.js","webpack://graph-diagram/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/platform/theme/common/colors/miscColors.js","webpack://graph-diagram/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/platform/theme/common/colors/editorColors.js","webpack://graph-diagram/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/platform/theme/common/colors/minimapColors.js","webpack://graph-diagram/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/platform/theme/common/colors/chartsColors.js","webpack://graph-diagram/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/platform/theme/common/colors/inputColors.js","webpack://graph-diagram/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/platform/theme/common/colors/listColors.js","webpack://graph-diagram/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/platform/theme/common/colors/menuColors.js","webpack://graph-diagram/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/platform/theme/common/colors/quickpickColors.js","webpack://graph-diagram/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/platform/theme/common/colors/searchColors.js","webpack://graph-diagram/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/platform/theme/common/colorUtils.js","webpack://graph-diagram/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/platform/theme/common/theme.js","webpack://graph-diagram/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { Color, RGBA } from '../../../base/common/color.js';\nimport { activeContrastBorder, editorBackground, registerColor, editorWarningForeground, editorInfoForeground, editorWarningBorder, editorInfoBorder, contrastBorder, editorFindMatchHighlight, editorWarningBackground } from '../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from '../../../platform/theme/common/themeService.js';\n/**\n * Definition of the editor colors\n */\nexport const editorLineHighlight = registerColor('editor.lineHighlightBackground', null, nls.localize('lineHighlight', 'Background color for the highlight of line at the cursor position.'));\nexport const editorLineHighlightBorder = registerColor('editor.lineHighlightBorder', { dark: '#282828', light: '#eeeeee', hcDark: '#f38518', hcLight: contrastBorder }, nls.localize('lineHighlightBorderBox', 'Background color for the border around the line at the cursor position.'));\nexport const editorRangeHighlight = registerColor('editor.rangeHighlightBackground', { dark: '#ffffff0b', light: '#fdff0033', hcDark: null, hcLight: null }, nls.localize('rangeHighlight', 'Background color of highlighted ranges, like by quick open and find features. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorRangeHighlightBorder = registerColor('editor.rangeHighlightBorder', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('rangeHighlightBorder', 'Background color of the border around highlighted ranges.'));\nexport const editorSymbolHighlight = registerColor('editor.symbolHighlightBackground', { dark: editorFindMatchHighlight, light: editorFindMatchHighlight, hcDark: null, hcLight: null }, nls.localize('symbolHighlight', 'Background color of highlighted symbol, like for go to definition or go next/previous symbol. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorSymbolHighlightBorder = registerColor('editor.symbolHighlightBorder', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('symbolHighlightBorder', 'Background color of the border around highlighted symbols.'));\nexport const editorCursorForeground = registerColor('editorCursor.foreground', { dark: '#AEAFAD', light: Color.black, hcDark: Color.white, hcLight: '#0F4A85' }, nls.localize('caret', 'Color of the editor cursor.'));\nexport const editorCursorBackground = registerColor('editorCursor.background', null, nls.localize('editorCursorBackground', 'The background color of the editor cursor. Allows customizing the color of a character overlapped by a block cursor.'));\nexport const editorMultiCursorPrimaryForeground = registerColor('editorMultiCursor.primary.foreground', editorCursorForeground, nls.localize('editorMultiCursorPrimaryForeground', 'Color of the primary editor cursor when multiple cursors are present.'));\nexport const editorMultiCursorPrimaryBackground = registerColor('editorMultiCursor.primary.background', editorCursorBackground, nls.localize('editorMultiCursorPrimaryBackground', 'The background color of the primary editor cursor when multiple cursors are present. Allows customizing the color of a character overlapped by a block cursor.'));\nexport const editorMultiCursorSecondaryForeground = registerColor('editorMultiCursor.secondary.foreground', editorCursorForeground, nls.localize('editorMultiCursorSecondaryForeground', 'Color of secondary editor cursors when multiple cursors are present.'));\nexport const editorMultiCursorSecondaryBackground = registerColor('editorMultiCursor.secondary.background', editorCursorBackground, nls.localize('editorMultiCursorSecondaryBackground', 'The background color of secondary editor cursors when multiple cursors are present. Allows customizing the color of a character overlapped by a block cursor.'));\nexport const editorWhitespaces = registerColor('editorWhitespace.foreground', { dark: '#e3e4e229', light: '#33333333', hcDark: '#e3e4e229', hcLight: '#CCCCCC' }, nls.localize('editorWhitespaces', 'Color of whitespace characters in the editor.'));\nexport const editorLineNumbers = registerColor('editorLineNumber.foreground', { dark: '#858585', light: '#237893', hcDark: Color.white, hcLight: '#292929' }, nls.localize('editorLineNumbers', 'Color of editor line numbers.'));\nexport const deprecatedEditorIndentGuides = registerColor('editorIndentGuide.background', editorWhitespaces, nls.localize('editorIndentGuides', 'Color of the editor indentation guides.'), false, nls.localize('deprecatedEditorIndentGuides', '\\'editorIndentGuide.background\\' is deprecated. Use \\'editorIndentGuide.background1\\' instead.'));\nexport const deprecatedEditorActiveIndentGuides = registerColor('editorIndentGuide.activeBackground', editorWhitespaces, nls.localize('editorActiveIndentGuide', 'Color of the active editor indentation guides.'), false, nls.localize('deprecatedEditorActiveIndentGuide', '\\'editorIndentGuide.activeBackground\\' is deprecated. Use \\'editorIndentGuide.activeBackground1\\' instead.'));\nexport const editorIndentGuide1 = registerColor('editorIndentGuide.background1', deprecatedEditorIndentGuides, nls.localize('editorIndentGuides1', 'Color of the editor indentation guides (1).'));\nexport const editorIndentGuide2 = registerColor('editorIndentGuide.background2', '#00000000', nls.localize('editorIndentGuides2', 'Color of the editor indentation guides (2).'));\nexport const editorIndentGuide3 = registerColor('editorIndentGuide.background3', '#00000000', nls.localize('editorIndentGuides3', 'Color of the editor indentation guides (3).'));\nexport const editorIndentGuide4 = registerColor('editorIndentGuide.background4', '#00000000', nls.localize('editorIndentGuides4', 'Color of the editor indentation guides (4).'));\nexport const editorIndentGuide5 = registerColor('editorIndentGuide.background5', '#00000000', nls.localize('editorIndentGuides5', 'Color of the editor indentation guides (5).'));\nexport const editorIndentGuide6 = registerColor('editorIndentGuide.background6', '#00000000', nls.localize('editorIndentGuides6', 'Color of the editor indentation guides (6).'));\nexport const editorActiveIndentGuide1 = registerColor('editorIndentGuide.activeBackground1', deprecatedEditorActiveIndentGuides, nls.localize('editorActiveIndentGuide1', 'Color of the active editor indentation guides (1).'));\nexport const editorActiveIndentGuide2 = registerColor('editorIndentGuide.activeBackground2', '#00000000', nls.localize('editorActiveIndentGuide2', 'Color of the active editor indentation guides (2).'));\nexport const editorActiveIndentGuide3 = registerColor('editorIndentGuide.activeBackground3', '#00000000', nls.localize('editorActiveIndentGuide3', 'Color of the active editor indentation guides (3).'));\nexport const editorActiveIndentGuide4 = registerColor('editorIndentGuide.activeBackground4', '#00000000', nls.localize('editorActiveIndentGuide4', 'Color of the active editor indentation guides (4).'));\nexport const editorActiveIndentGuide5 = registerColor('editorIndentGuide.activeBackground5', '#00000000', nls.localize('editorActiveIndentGuide5', 'Color of the active editor indentation guides (5).'));\nexport const editorActiveIndentGuide6 = registerColor('editorIndentGuide.activeBackground6', '#00000000', nls.localize('editorActiveIndentGuide6', 'Color of the active editor indentation guides (6).'));\nconst deprecatedEditorActiveLineNumber = registerColor('editorActiveLineNumber.foreground', { dark: '#c6c6c6', light: '#0B216F', hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('editorActiveLineNumber', 'Color of editor active line number'), false, nls.localize('deprecatedEditorActiveLineNumber', 'Id is deprecated. Use \\'editorLineNumber.activeForeground\\' instead.'));\nexport const editorActiveLineNumber = registerColor('editorLineNumber.activeForeground', deprecatedEditorActiveLineNumber, nls.localize('editorActiveLineNumber', 'Color of editor active line number'));\nexport const editorDimmedLineNumber = registerColor('editorLineNumber.dimmedForeground', null, nls.localize('editorDimmedLineNumber', 'Color of the final editor line when editor.renderFinalNewline is set to dimmed.'));\nexport const editorRuler = registerColor('editorRuler.foreground', { dark: '#5A5A5A', light: Color.lightgrey, hcDark: Color.white, hcLight: '#292929' }, nls.localize('editorRuler', 'Color of the editor rulers.'));\nexport const editorCodeLensForeground = registerColor('editorCodeLens.foreground', { dark: '#999999', light: '#919191', hcDark: '#999999', hcLight: '#292929' }, nls.localize('editorCodeLensForeground', 'Foreground color of editor CodeLens'));\nexport const editorBracketMatchBackground = registerColor('editorBracketMatch.background', { dark: '#0064001a', light: '#0064001a', hcDark: '#0064001a', hcLight: '#0000' }, nls.localize('editorBracketMatchBackground', 'Background color behind matching brackets'));\nexport const editorBracketMatchBorder = registerColor('editorBracketMatch.border', { dark: '#888', light: '#B9B9B9', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('editorBracketMatchBorder', 'Color for matching brackets boxes'));\nexport const editorOverviewRulerBorder = registerColor('editorOverviewRuler.border', { dark: '#7f7f7f4d', light: '#7f7f7f4d', hcDark: '#7f7f7f4d', hcLight: '#666666' }, nls.localize('editorOverviewRulerBorder', 'Color of the overview ruler border.'));\nexport const editorOverviewRulerBackground = registerColor('editorOverviewRuler.background', null, nls.localize('editorOverviewRulerBackground', 'Background color of the editor overview ruler.'));\nexport const editorGutter = registerColor('editorGutter.background', editorBackground, nls.localize('editorGutter', 'Background color of the editor gutter. The gutter contains the glyph margins and the line numbers.'));\nexport const editorUnnecessaryCodeBorder = registerColor('editorUnnecessaryCode.border', { dark: null, light: null, hcDark: Color.fromHex('#fff').transparent(0.8), hcLight: contrastBorder }, nls.localize('unnecessaryCodeBorder', 'Border color of unnecessary (unused) source code in the editor.'));\nexport const editorUnnecessaryCodeOpacity = registerColor('editorUnnecessaryCode.opacity', { dark: Color.fromHex('#000a'), light: Color.fromHex('#0007'), hcDark: null, hcLight: null }, nls.localize('unnecessaryCodeOpacity', 'Opacity of unnecessary (unused) source code in the editor. For example, \"#000000c0\" will render the code with 75% opacity. For high contrast themes, use the  \\'editorUnnecessaryCode.border\\' theme color to underline unnecessary code instead of fading it out.'));\nexport const ghostTextBorder = registerColor('editorGhostText.border', { dark: null, light: null, hcDark: Color.fromHex('#fff').transparent(0.8), hcLight: Color.fromHex('#292929').transparent(0.8) }, nls.localize('editorGhostTextBorder', 'Border color of ghost text in the editor.'));\nexport const ghostTextForeground = registerColor('editorGhostText.foreground', { dark: Color.fromHex('#ffffff56'), light: Color.fromHex('#0007'), hcDark: null, hcLight: null }, nls.localize('editorGhostTextForeground', 'Foreground color of the ghost text in the editor.'));\nexport const ghostTextBackground = registerColor('editorGhostText.background', null, nls.localize('editorGhostTextBackground', 'Background color of the ghost text in the editor.'));\nconst rulerRangeDefault = new Color(new RGBA(0, 122, 204, 0.6));\nexport const overviewRulerRangeHighlight = registerColor('editorOverviewRuler.rangeHighlightForeground', rulerRangeDefault, nls.localize('overviewRulerRangeHighlight', 'Overview ruler marker color for range highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const overviewRulerError = registerColor('editorOverviewRuler.errorForeground', { dark: new Color(new RGBA(255, 18, 18, 0.7)), light: new Color(new RGBA(255, 18, 18, 0.7)), hcDark: new Color(new RGBA(255, 50, 50, 1)), hcLight: '#B5200D' }, nls.localize('overviewRuleError', 'Overview ruler marker color for errors.'));\nexport const overviewRulerWarning = registerColor('editorOverviewRuler.warningForeground', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningBorder, hcLight: editorWarningBorder }, nls.localize('overviewRuleWarning', 'Overview ruler marker color for warnings.'));\nexport const overviewRulerInfo = registerColor('editorOverviewRuler.infoForeground', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: editorInfoBorder, hcLight: editorInfoBorder }, nls.localize('overviewRuleInfo', 'Overview ruler marker color for infos.'));\nexport const editorBracketHighlightingForeground1 = registerColor('editorBracketHighlight.foreground1', { dark: '#FFD700', light: '#0431FAFF', hcDark: '#FFD700', hcLight: '#0431FAFF' }, nls.localize('editorBracketHighlightForeground1', 'Foreground color of brackets (1). Requires enabling bracket pair colorization.'));\nexport const editorBracketHighlightingForeground2 = registerColor('editorBracketHighlight.foreground2', { dark: '#DA70D6', light: '#319331FF', hcDark: '#DA70D6', hcLight: '#319331FF' }, nls.localize('editorBracketHighlightForeground2', 'Foreground color of brackets (2). Requires enabling bracket pair colorization.'));\nexport const editorBracketHighlightingForeground3 = registerColor('editorBracketHighlight.foreground3', { dark: '#179FFF', light: '#7B3814FF', hcDark: '#87CEFA', hcLight: '#7B3814FF' }, nls.localize('editorBracketHighlightForeground3', 'Foreground color of brackets (3). Requires enabling bracket pair colorization.'));\nexport const editorBracketHighlightingForeground4 = registerColor('editorBracketHighlight.foreground4', '#00000000', nls.localize('editorBracketHighlightForeground4', 'Foreground color of brackets (4). Requires enabling bracket pair colorization.'));\nexport const editorBracketHighlightingForeground5 = registerColor('editorBracketHighlight.foreground5', '#00000000', nls.localize('editorBracketHighlightForeground5', 'Foreground color of brackets (5). Requires enabling bracket pair colorization.'));\nexport const editorBracketHighlightingForeground6 = registerColor('editorBracketHighlight.foreground6', '#00000000', nls.localize('editorBracketHighlightForeground6', 'Foreground color of brackets (6). Requires enabling bracket pair colorization.'));\nexport const editorBracketHighlightingUnexpectedBracketForeground = registerColor('editorBracketHighlight.unexpectedBracket.foreground', { dark: new Color(new RGBA(255, 18, 18, 0.8)), light: new Color(new RGBA(255, 18, 18, 0.8)), hcDark: 'new Color(new RGBA(255, 50, 50, 1))', hcLight: '#B5200D' }, nls.localize('editorBracketHighlightUnexpectedBracketForeground', 'Foreground color of unexpected brackets.'));\nexport const editorBracketPairGuideBackground1 = registerColor('editorBracketPairGuide.background1', '#00000000', nls.localize('editorBracketPairGuide.background1', 'Background color of inactive bracket pair guides (1). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideBackground2 = registerColor('editorBracketPairGuide.background2', '#00000000', nls.localize('editorBracketPairGuide.background2', 'Background color of inactive bracket pair guides (2). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideBackground3 = registerColor('editorBracketPairGuide.background3', '#00000000', nls.localize('editorBracketPairGuide.background3', 'Background color of inactive bracket pair guides (3). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideBackground4 = registerColor('editorBracketPairGuide.background4', '#00000000', nls.localize('editorBracketPairGuide.background4', 'Background color of inactive bracket pair guides (4). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideBackground5 = registerColor('editorBracketPairGuide.background5', '#00000000', nls.localize('editorBracketPairGuide.background5', 'Background color of inactive bracket pair guides (5). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideBackground6 = registerColor('editorBracketPairGuide.background6', '#00000000', nls.localize('editorBracketPairGuide.background6', 'Background color of inactive bracket pair guides (6). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideActiveBackground1 = registerColor('editorBracketPairGuide.activeBackground1', '#00000000', nls.localize('editorBracketPairGuide.activeBackground1', 'Background color of active bracket pair guides (1). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideActiveBackground2 = registerColor('editorBracketPairGuide.activeBackground2', '#00000000', nls.localize('editorBracketPairGuide.activeBackground2', 'Background color of active bracket pair guides (2). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideActiveBackground3 = registerColor('editorBracketPairGuide.activeBackground3', '#00000000', nls.localize('editorBracketPairGuide.activeBackground3', 'Background color of active bracket pair guides (3). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideActiveBackground4 = registerColor('editorBracketPairGuide.activeBackground4', '#00000000', nls.localize('editorBracketPairGuide.activeBackground4', 'Background color of active bracket pair guides (4). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideActiveBackground5 = registerColor('editorBracketPairGuide.activeBackground5', '#00000000', nls.localize('editorBracketPairGuide.activeBackground5', 'Background color of active bracket pair guides (5). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideActiveBackground6 = registerColor('editorBracketPairGuide.activeBackground6', '#00000000', nls.localize('editorBracketPairGuide.activeBackground6', 'Background color of active bracket pair guides (6). Requires enabling bracket pair guides.'));\nexport const editorUnicodeHighlightBorder = registerColor('editorUnicodeHighlight.border', editorWarningForeground, nls.localize('editorUnicodeHighlight.border', 'Border color used to highlight unicode characters.'));\nexport const editorUnicodeHighlightBackground = registerColor('editorUnicodeHighlight.background', editorWarningBackground, nls.localize('editorUnicodeHighlight.background', 'Background color used to highlight unicode characters.'));\n// contains all color rules that used to defined in editor/browser/widget/editor.css\nregisterThemingParticipant((theme, collector) => {\n    const background = theme.getColor(editorBackground);\n    const lineHighlight = theme.getColor(editorLineHighlight);\n    const imeBackground = (lineHighlight && !lineHighlight.isTransparent() ? lineHighlight : background);\n    if (imeBackground) {\n        collector.addRule(`.monaco-editor .inputarea.ime-input { background-color: ${imeBackground}; }`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color } from '../../../../base/common/color.js';\nimport { registerColor, transparent } from '../colorUtils.js';\nexport const foreground = registerColor('foreground', { dark: '#CCCCCC', light: '#616161', hcDark: '#FFFFFF', hcLight: '#292929' }, nls.localize('foreground', \"Overall foreground color. This color is only used if not overridden by a component.\"));\nexport const disabledForeground = registerColor('disabledForeground', { dark: '#CCCCCC80', light: '#61616180', hcDark: '#A5A5A5', hcLight: '#7F7F7F' }, nls.localize('disabledForeground', \"Overall foreground for disabled elements. This color is only used if not overridden by a component.\"));\nexport const errorForeground = registerColor('errorForeground', { dark: '#F48771', light: '#A1260D', hcDark: '#F48771', hcLight: '#B5200D' }, nls.localize('errorForeground', \"Overall foreground color for error messages. This color is only used if not overridden by a component.\"));\nexport const descriptionForeground = registerColor('descriptionForeground', { light: '#717171', dark: transparent(foreground, 0.7), hcDark: transparent(foreground, 0.7), hcLight: transparent(foreground, 0.7) }, nls.localize('descriptionForeground', \"Foreground color for description text providing additional information, for example for a label.\"));\nexport const iconForeground = registerColor('icon.foreground', { dark: '#C5C5C5', light: '#424242', hcDark: '#FFFFFF', hcLight: '#292929' }, nls.localize('iconForeground', \"The default color for icons in the workbench.\"));\nexport const focusBorder = registerColor('focusBorder', { dark: '#007FD4', light: '#0090F1', hcDark: '#F38518', hcLight: '#006BBD' }, nls.localize('focusBorder', \"Overall border color for focused elements. This color is only used if not overridden by a component.\"));\nexport const contrastBorder = registerColor('contrastBorder', { light: null, dark: null, hcDark: '#6FC3DF', hcLight: '#0F4A85' }, nls.localize('contrastBorder', \"An extra border around elements to separate them from others for greater contrast.\"));\nexport const activeContrastBorder = registerColor('contrastActiveBorder', { light: null, dark: null, hcDark: focusBorder, hcLight: focusBorder }, nls.localize('activeContrastBorder', \"An extra border around active elements to separate them from others for greater contrast.\"));\nexport const selectionBackground = registerColor('selection.background', null, nls.localize('selectionBackground', \"The background color of text selections in the workbench (e.g. for input fields or text areas). Note that this does not apply to selections within the editor.\"));\n// ------ text link\nexport const textLinkForeground = registerColor('textLink.foreground', { light: '#006AB1', dark: '#3794FF', hcDark: '#21A6FF', hcLight: '#0F4A85' }, nls.localize('textLinkForeground', \"Foreground color for links in text.\"));\nexport const textLinkActiveForeground = registerColor('textLink.activeForeground', { light: '#006AB1', dark: '#3794FF', hcDark: '#21A6FF', hcLight: '#0F4A85' }, nls.localize('textLinkActiveForeground', \"Foreground color for links in text when clicked on and on mouse hover.\"));\nexport const textSeparatorForeground = registerColor('textSeparator.foreground', { light: '#0000002e', dark: '#ffffff2e', hcDark: Color.black, hcLight: '#292929' }, nls.localize('textSeparatorForeground', \"Color for text separators.\"));\n// ------ text preformat\nexport const textPreformatForeground = registerColor('textPreformat.foreground', { light: '#A31515', dark: '#D7BA7D', hcDark: '#000000', hcLight: '#FFFFFF' }, nls.localize('textPreformatForeground', \"Foreground color for preformatted text segments.\"));\nexport const textPreformatBackground = registerColor('textPreformat.background', { light: '#0000001A', dark: '#FFFFFF1A', hcDark: '#FFFFFF', hcLight: '#09345f' }, nls.localize('textPreformatBackground', \"Background color for preformatted text segments.\"));\n// ------ text block quote\nexport const textBlockQuoteBackground = registerColor('textBlockQuote.background', { light: '#f2f2f2', dark: '#222222', hcDark: null, hcLight: '#F2F2F2' }, nls.localize('textBlockQuoteBackground', \"Background color for block quotes in text.\"));\nexport const textBlockQuoteBorder = registerColor('textBlockQuote.border', { light: '#007acc80', dark: '#007acc80', hcDark: Color.white, hcLight: '#292929' }, nls.localize('textBlockQuoteBorder', \"Border color for block quotes in text.\"));\n// ------ text code block\nexport const textCodeBlockBackground = registerColor('textCodeBlock.background', { light: '#dcdcdc66', dark: '#0a0a0a66', hcDark: Color.black, hcLight: '#F2F2F2' }, nls.localize('textCodeBlockBackground', \"Background color for code blocks in text.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color } from '../../../../base/common/color.js';\nimport { registerColor, transparent } from '../colorUtils.js';\n// Import the colors we need\nimport { contrastBorder, focusBorder } from './baseColors.js';\n// ----- sash\nexport const sashHoverBorder = registerColor('sash.hoverBorder', focusBorder, nls.localize('sashActiveBorder', \"Border color of active sashes.\"));\n// ----- badge\nexport const badgeBackground = registerColor('badge.background', { dark: '#4D4D4D', light: '#C4C4C4', hcDark: Color.black, hcLight: '#0F4A85' }, nls.localize('badgeBackground', \"Badge background color. Badges are small information labels, e.g. for search results count.\"));\nexport const badgeForeground = registerColor('badge.foreground', { dark: Color.white, light: '#333', hcDark: Color.white, hcLight: Color.white }, nls.localize('badgeForeground', \"Badge foreground color. Badges are small information labels, e.g. for search results count.\"));\n// ----- scrollbar\nexport const scrollbarShadow = registerColor('scrollbar.shadow', { dark: '#000000', light: '#DDDDDD', hcDark: null, hcLight: null }, nls.localize('scrollbarShadow', \"Scrollbar shadow to indicate that the view is scrolled.\"));\nexport const scrollbarSliderBackground = registerColor('scrollbarSlider.background', { dark: Color.fromHex('#797979').transparent(0.4), light: Color.fromHex('#646464').transparent(0.4), hcDark: transparent(contrastBorder, 0.6), hcLight: transparent(contrastBorder, 0.4) }, nls.localize('scrollbarSliderBackground', \"Scrollbar slider background color.\"));\nexport const scrollbarSliderHoverBackground = registerColor('scrollbarSlider.hoverBackground', { dark: Color.fromHex('#646464').transparent(0.7), light: Color.fromHex('#646464').transparent(0.7), hcDark: transparent(contrastBorder, 0.8), hcLight: transparent(contrastBorder, 0.8) }, nls.localize('scrollbarSliderHoverBackground', \"Scrollbar slider background color when hovering.\"));\nexport const scrollbarSliderActiveBackground = registerColor('scrollbarSlider.activeBackground', { dark: Color.fromHex('#BFBFBF').transparent(0.4), light: Color.fromHex('#000000').transparent(0.6), hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('scrollbarSliderActiveBackground', \"Scrollbar slider background color when clicked on.\"));\n// ----- progress bar\nexport const progressBarBackground = registerColor('progressBar.background', { dark: Color.fromHex('#0E70C0'), light: Color.fromHex('#0E70C0'), hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('progressBarBackground', \"Background color of the progress bar that can show for long running operations.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color, RGBA } from '../../../../base/common/color.js';\nimport { registerColor, transparent, lessProminent, darken, lighten } from '../colorUtils.js';\n// Import the colors we need\nimport { foreground, contrastBorder, activeContrastBorder } from './baseColors.js';\nimport { scrollbarShadow, badgeBackground } from './miscColors.js';\n// ----- editor\nexport const editorBackground = registerColor('editor.background', { light: '#ffffff', dark: '#1E1E1E', hcDark: Color.black, hcLight: Color.white }, nls.localize('editorBackground', \"Editor background color.\"));\nexport const editorForeground = registerColor('editor.foreground', { light: '#333333', dark: '#BBBBBB', hcDark: Color.white, hcLight: foreground }, nls.localize('editorForeground', \"Editor default foreground color.\"));\nexport const editorStickyScrollBackground = registerColor('editorStickyScroll.background', editorBackground, nls.localize('editorStickyScrollBackground', \"Background color of sticky scroll in the editor\"));\nexport const editorStickyScrollHoverBackground = registerColor('editorStickyScrollHover.background', { dark: '#2A2D2E', light: '#F0F0F0', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('editorStickyScrollHoverBackground', \"Background color of sticky scroll on hover in the editor\"));\nexport const editorStickyScrollBorder = registerColor('editorStickyScroll.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('editorStickyScrollBorder', \"Border color of sticky scroll in the editor\"));\nexport const editorStickyScrollShadow = registerColor('editorStickyScroll.shadow', scrollbarShadow, nls.localize('editorStickyScrollShadow', \" Shadow color of sticky scroll in the editor\"));\nexport const editorWidgetBackground = registerColor('editorWidget.background', { dark: '#252526', light: '#F3F3F3', hcDark: '#0C141F', hcLight: Color.white }, nls.localize('editorWidgetBackground', 'Background color of editor widgets, such as find/replace.'));\nexport const editorWidgetForeground = registerColor('editorWidget.foreground', foreground, nls.localize('editorWidgetForeground', 'Foreground color of editor widgets, such as find/replace.'));\nexport const editorWidgetBorder = registerColor('editorWidget.border', { dark: '#454545', light: '#C8C8C8', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('editorWidgetBorder', 'Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.'));\nexport const editorWidgetResizeBorder = registerColor('editorWidget.resizeBorder', null, nls.localize('editorWidgetResizeBorder', \"Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget.\"));\nexport const editorErrorBackground = registerColor('editorError.background', null, nls.localize('editorError.background', 'Background color of error text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorErrorForeground = registerColor('editorError.foreground', { dark: '#F14C4C', light: '#E51400', hcDark: '#F48771', hcLight: '#B5200D' }, nls.localize('editorError.foreground', 'Foreground color of error squigglies in the editor.'));\nexport const editorErrorBorder = registerColor('editorError.border', { dark: null, light: null, hcDark: Color.fromHex('#E47777').transparent(0.8), hcLight: '#B5200D' }, nls.localize('errorBorder', 'If set, color of double underlines for errors in the editor.'));\nexport const editorWarningBackground = registerColor('editorWarning.background', null, nls.localize('editorWarning.background', 'Background color of warning text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorWarningForeground = registerColor('editorWarning.foreground', { dark: '#CCA700', light: '#BF8803', hcDark: '#FFD370', hcLight: '#895503' }, nls.localize('editorWarning.foreground', 'Foreground color of warning squigglies in the editor.'));\nexport const editorWarningBorder = registerColor('editorWarning.border', { dark: null, light: null, hcDark: Color.fromHex('#FFCC00').transparent(0.8), hcLight: Color.fromHex('#FFCC00').transparent(0.8) }, nls.localize('warningBorder', 'If set, color of double underlines for warnings in the editor.'));\nexport const editorInfoBackground = registerColor('editorInfo.background', null, nls.localize('editorInfo.background', 'Background color of info text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorInfoForeground = registerColor('editorInfo.foreground', { dark: '#3794FF', light: '#1a85ff', hcDark: '#3794FF', hcLight: '#1a85ff' }, nls.localize('editorInfo.foreground', 'Foreground color of info squigglies in the editor.'));\nexport const editorInfoBorder = registerColor('editorInfo.border', { dark: null, light: null, hcDark: Color.fromHex('#3794FF').transparent(0.8), hcLight: '#292929' }, nls.localize('infoBorder', 'If set, color of double underlines for infos in the editor.'));\nexport const editorHintForeground = registerColor('editorHint.foreground', { dark: Color.fromHex('#eeeeee').transparent(0.7), light: '#6c6c6c', hcDark: null, hcLight: null }, nls.localize('editorHint.foreground', 'Foreground color of hint squigglies in the editor.'));\nexport const editorHintBorder = registerColor('editorHint.border', { dark: null, light: null, hcDark: Color.fromHex('#eeeeee').transparent(0.8), hcLight: '#292929' }, nls.localize('hintBorder', 'If set, color of double underlines for hints in the editor.'));\nexport const editorActiveLinkForeground = registerColor('editorLink.activeForeground', { dark: '#4E94CE', light: Color.blue, hcDark: Color.cyan, hcLight: '#292929' }, nls.localize('activeLinkForeground', 'Color of active links.'));\n// ----- editor selection\nexport const editorSelectionBackground = registerColor('editor.selectionBackground', { light: '#ADD6FF', dark: '#264F78', hcDark: '#f3f518', hcLight: '#0F4A85' }, nls.localize('editorSelectionBackground', \"Color of the editor selection.\"));\nexport const editorSelectionForeground = registerColor('editor.selectionForeground', { light: null, dark: null, hcDark: '#000000', hcLight: Color.white }, nls.localize('editorSelectionForeground', \"Color of the selected text for high contrast.\"));\nexport const editorInactiveSelection = registerColor('editor.inactiveSelectionBackground', { light: transparent(editorSelectionBackground, 0.5), dark: transparent(editorSelectionBackground, 0.5), hcDark: transparent(editorSelectionBackground, 0.7), hcLight: transparent(editorSelectionBackground, 0.5) }, nls.localize('editorInactiveSelection', \"Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorSelectionHighlight = registerColor('editor.selectionHighlightBackground', { light: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), dark: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), hcDark: null, hcLight: null }, nls.localize('editorSelectionHighlight', 'Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorSelectionHighlightBorder = registerColor('editor.selectionHighlightBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('editorSelectionHighlightBorder', \"Border color for regions with the same content as the selection.\"));\n// ----- editor find\nexport const editorFindMatch = registerColor('editor.findMatchBackground', { light: '#A8AC94', dark: '#515C6A', hcDark: null, hcLight: null }, nls.localize('editorFindMatch', \"Color of the current search match.\"));\nexport const editorFindMatchForeground = registerColor('editor.findMatchForeground', null, nls.localize('editorFindMatchForeground', \"Text color of the current search match.\"));\nexport const editorFindMatchHighlight = registerColor('editor.findMatchHighlightBackground', { light: '#EA5C0055', dark: '#EA5C0055', hcDark: null, hcLight: null }, nls.localize('findMatchHighlight', \"Color of the other search matches. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFindMatchHighlightForeground = registerColor('editor.findMatchHighlightForeground', null, nls.localize('findMatchHighlightForeground', \"Foreground color of the other search matches.\"), true);\nexport const editorFindRangeHighlight = registerColor('editor.findRangeHighlightBackground', { dark: '#3a3d4166', light: '#b4b4b44d', hcDark: null, hcLight: null }, nls.localize('findRangeHighlight', \"Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFindMatchBorder = registerColor('editor.findMatchBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('editorFindMatchBorder', \"Border color of the current search match.\"));\nexport const editorFindMatchHighlightBorder = registerColor('editor.findMatchHighlightBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('findMatchHighlightBorder', \"Border color of the other search matches.\"));\nexport const editorFindRangeHighlightBorder = registerColor('editor.findRangeHighlightBorder', { dark: null, light: null, hcDark: transparent(activeContrastBorder, 0.4), hcLight: transparent(activeContrastBorder, 0.4) }, nls.localize('findRangeHighlightBorder', \"Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\n// ----- editor hover\nexport const editorHoverHighlight = registerColor('editor.hoverHighlightBackground', { light: '#ADD6FF26', dark: '#264f7840', hcDark: '#ADD6FF26', hcLight: null }, nls.localize('hoverHighlight', 'Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorHoverBackground = registerColor('editorHoverWidget.background', editorWidgetBackground, nls.localize('hoverBackground', 'Background color of the editor hover.'));\nexport const editorHoverForeground = registerColor('editorHoverWidget.foreground', editorWidgetForeground, nls.localize('hoverForeground', 'Foreground color of the editor hover.'));\nexport const editorHoverBorder = registerColor('editorHoverWidget.border', editorWidgetBorder, nls.localize('hoverBorder', 'Border color of the editor hover.'));\nexport const editorHoverStatusBarBackground = registerColor('editorHoverWidget.statusBarBackground', { dark: lighten(editorHoverBackground, 0.2), light: darken(editorHoverBackground, 0.05), hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('statusBarBackground', \"Background color of the editor hover status bar.\"));\n// ----- editor inlay hint\nexport const editorInlayHintForeground = registerColor('editorInlayHint.foreground', { dark: '#969696', light: '#969696', hcDark: Color.white, hcLight: Color.black }, nls.localize('editorInlayHintForeground', 'Foreground color of inline hints'));\nexport const editorInlayHintBackground = registerColor('editorInlayHint.background', { dark: transparent(badgeBackground, .10), light: transparent(badgeBackground, .10), hcDark: transparent(Color.white, .10), hcLight: transparent(badgeBackground, .10) }, nls.localize('editorInlayHintBackground', 'Background color of inline hints'));\nexport const editorInlayHintTypeForeground = registerColor('editorInlayHint.typeForeground', editorInlayHintForeground, nls.localize('editorInlayHintForegroundTypes', 'Foreground color of inline hints for types'));\nexport const editorInlayHintTypeBackground = registerColor('editorInlayHint.typeBackground', editorInlayHintBackground, nls.localize('editorInlayHintBackgroundTypes', 'Background color of inline hints for types'));\nexport const editorInlayHintParameterForeground = registerColor('editorInlayHint.parameterForeground', editorInlayHintForeground, nls.localize('editorInlayHintForegroundParameter', 'Foreground color of inline hints for parameters'));\nexport const editorInlayHintParameterBackground = registerColor('editorInlayHint.parameterBackground', editorInlayHintBackground, nls.localize('editorInlayHintBackgroundParameter', 'Background color of inline hints for parameters'));\n// ----- editor lightbulb\nexport const editorLightBulbForeground = registerColor('editorLightBulb.foreground', { dark: '#FFCC00', light: '#DDB100', hcDark: '#FFCC00', hcLight: '#007ACC' }, nls.localize('editorLightBulbForeground', \"The color used for the lightbulb actions icon.\"));\nexport const editorLightBulbAutoFixForeground = registerColor('editorLightBulbAutoFix.foreground', { dark: '#75BEFF', light: '#007ACC', hcDark: '#75BEFF', hcLight: '#007ACC' }, nls.localize('editorLightBulbAutoFixForeground', \"The color used for the lightbulb auto fix actions icon.\"));\nexport const editorLightBulbAiForeground = registerColor('editorLightBulbAi.foreground', editorLightBulbForeground, nls.localize('editorLightBulbAiForeground', \"The color used for the lightbulb AI icon.\"));\n// ----- editor snippet\nexport const snippetTabstopHighlightBackground = registerColor('editor.snippetTabstopHighlightBackground', { dark: new Color(new RGBA(124, 124, 124, 0.3)), light: new Color(new RGBA(10, 50, 100, 0.2)), hcDark: new Color(new RGBA(124, 124, 124, 0.3)), hcLight: new Color(new RGBA(10, 50, 100, 0.2)) }, nls.localize('snippetTabstopHighlightBackground', \"Highlight background color of a snippet tabstop.\"));\nexport const snippetTabstopHighlightBorder = registerColor('editor.snippetTabstopHighlightBorder', null, nls.localize('snippetTabstopHighlightBorder', \"Highlight border color of a snippet tabstop.\"));\nexport const snippetFinalTabstopHighlightBackground = registerColor('editor.snippetFinalTabstopHighlightBackground', null, nls.localize('snippetFinalTabstopHighlightBackground', \"Highlight background color of the final tabstop of a snippet.\"));\nexport const snippetFinalTabstopHighlightBorder = registerColor('editor.snippetFinalTabstopHighlightBorder', { dark: '#525252', light: new Color(new RGBA(10, 50, 100, 0.5)), hcDark: '#525252', hcLight: '#292929' }, nls.localize('snippetFinalTabstopHighlightBorder', \"Highlight border color of the final tabstop of a snippet.\"));\n// ----- diff editor\nexport const defaultInsertColor = new Color(new RGBA(155, 185, 85, .2));\nexport const defaultRemoveColor = new Color(new RGBA(255, 0, 0, .2));\nexport const diffInserted = registerColor('diffEditor.insertedTextBackground', { dark: '#9ccc2c33', light: '#9ccc2c40', hcDark: null, hcLight: null }, nls.localize('diffEditorInserted', 'Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffRemoved = registerColor('diffEditor.removedTextBackground', { dark: '#ff000033', light: '#ff000033', hcDark: null, hcLight: null }, nls.localize('diffEditorRemoved', 'Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffInsertedLine = registerColor('diffEditor.insertedLineBackground', { dark: defaultInsertColor, light: defaultInsertColor, hcDark: null, hcLight: null }, nls.localize('diffEditorInsertedLines', 'Background color for lines that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffRemovedLine = registerColor('diffEditor.removedLineBackground', { dark: defaultRemoveColor, light: defaultRemoveColor, hcDark: null, hcLight: null }, nls.localize('diffEditorRemovedLines', 'Background color for lines that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffInsertedLineGutter = registerColor('diffEditorGutter.insertedLineBackground', null, nls.localize('diffEditorInsertedLineGutter', 'Background color for the margin where lines got inserted.'));\nexport const diffRemovedLineGutter = registerColor('diffEditorGutter.removedLineBackground', null, nls.localize('diffEditorRemovedLineGutter', 'Background color for the margin where lines got removed.'));\nexport const diffOverviewRulerInserted = registerColor('diffEditorOverview.insertedForeground', null, nls.localize('diffEditorOverviewInserted', 'Diff overview ruler foreground for inserted content.'));\nexport const diffOverviewRulerRemoved = registerColor('diffEditorOverview.removedForeground', null, nls.localize('diffEditorOverviewRemoved', 'Diff overview ruler foreground for removed content.'));\nexport const diffInsertedOutline = registerColor('diffEditor.insertedTextBorder', { dark: null, light: null, hcDark: '#33ff2eff', hcLight: '#374E06' }, nls.localize('diffEditorInsertedOutline', 'Outline color for the text that got inserted.'));\nexport const diffRemovedOutline = registerColor('diffEditor.removedTextBorder', { dark: null, light: null, hcDark: '#FF008F', hcLight: '#AD0707' }, nls.localize('diffEditorRemovedOutline', 'Outline color for text that got removed.'));\nexport const diffBorder = registerColor('diffEditor.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('diffEditorBorder', 'Border color between the two text editors.'));\nexport const diffDiagonalFill = registerColor('diffEditor.diagonalFill', { dark: '#cccccc33', light: '#22222233', hcDark: null, hcLight: null }, nls.localize('diffDiagonalFill', \"Color of the diff editor's diagonal fill. The diagonal fill is used in side-by-side diff views.\"));\nexport const diffUnchangedRegionBackground = registerColor('diffEditor.unchangedRegionBackground', 'sideBar.background', nls.localize('diffEditor.unchangedRegionBackground', \"The background color of unchanged blocks in the diff editor.\"));\nexport const diffUnchangedRegionForeground = registerColor('diffEditor.unchangedRegionForeground', 'foreground', nls.localize('diffEditor.unchangedRegionForeground', \"The foreground color of unchanged blocks in the diff editor.\"));\nexport const diffUnchangedTextBackground = registerColor('diffEditor.unchangedCodeBackground', { dark: '#74747429', light: '#b8b8b829', hcDark: null, hcLight: null }, nls.localize('diffEditor.unchangedCodeBackground', \"The background color of unchanged code in the diff editor.\"));\n// ----- widget\nexport const widgetShadow = registerColor('widget.shadow', { dark: transparent(Color.black, .36), light: transparent(Color.black, .16), hcDark: null, hcLight: null }, nls.localize('widgetShadow', 'Shadow color of widgets such as find/replace inside the editor.'));\nexport const widgetBorder = registerColor('widget.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('widgetBorder', 'Border color of widgets such as find/replace inside the editor.'));\n// ----- toolbar\nexport const toolbarHoverBackground = registerColor('toolbar.hoverBackground', { dark: '#5a5d5e50', light: '#b8b8b850', hcDark: null, hcLight: null }, nls.localize('toolbarHoverBackground', \"Toolbar background when hovering over actions using the mouse\"));\nexport const toolbarHoverOutline = registerColor('toolbar.hoverOutline', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('toolbarHoverOutline', \"Toolbar outline when hovering over actions using the mouse\"));\nexport const toolbarActiveBackground = registerColor('toolbar.activeBackground', { dark: lighten(toolbarHoverBackground, 0.1), light: darken(toolbarHoverBackground, 0.1), hcDark: null, hcLight: null }, nls.localize('toolbarActiveBackground', \"Toolbar background when holding the mouse over actions\"));\n// ----- breadcumbs\nexport const breadcrumbsForeground = registerColor('breadcrumb.foreground', transparent(foreground, 0.8), nls.localize('breadcrumbsFocusForeground', \"Color of focused breadcrumb items.\"));\nexport const breadcrumbsBackground = registerColor('breadcrumb.background', editorBackground, nls.localize('breadcrumbsBackground', \"Background color of breadcrumb items.\"));\nexport const breadcrumbsFocusForeground = registerColor('breadcrumb.focusForeground', { light: darken(foreground, 0.2), dark: lighten(foreground, 0.1), hcDark: lighten(foreground, 0.1), hcLight: lighten(foreground, 0.1) }, nls.localize('breadcrumbsFocusForeground', \"Color of focused breadcrumb items.\"));\nexport const breadcrumbsActiveSelectionForeground = registerColor('breadcrumb.activeSelectionForeground', { light: darken(foreground, 0.2), dark: lighten(foreground, 0.1), hcDark: lighten(foreground, 0.1), hcLight: lighten(foreground, 0.1) }, nls.localize('breadcrumbsSelectedForeground', \"Color of selected breadcrumb items.\"));\nexport const breadcrumbsPickerBackground = registerColor('breadcrumbPicker.background', editorWidgetBackground, nls.localize('breadcrumbsSelectedBackground', \"Background color of breadcrumb item picker.\"));\n// ----- merge\nconst headerTransparency = 0.5;\nconst currentBaseColor = Color.fromHex('#40C8AE').transparent(headerTransparency);\nconst incomingBaseColor = Color.fromHex('#40A6FF').transparent(headerTransparency);\nconst commonBaseColor = Color.fromHex('#606060').transparent(0.4);\nconst contentTransparency = 0.4;\nconst rulerTransparency = 1;\nexport const mergeCurrentHeaderBackground = registerColor('merge.currentHeaderBackground', { dark: currentBaseColor, light: currentBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeCurrentHeaderBackground', 'Current header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCurrentContentBackground = registerColor('merge.currentContentBackground', transparent(mergeCurrentHeaderBackground, contentTransparency), nls.localize('mergeCurrentContentBackground', 'Current content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeIncomingHeaderBackground = registerColor('merge.incomingHeaderBackground', { dark: incomingBaseColor, light: incomingBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeIncomingHeaderBackground', 'Incoming header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeIncomingContentBackground = registerColor('merge.incomingContentBackground', transparent(mergeIncomingHeaderBackground, contentTransparency), nls.localize('mergeIncomingContentBackground', 'Incoming content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCommonHeaderBackground = registerColor('merge.commonHeaderBackground', { dark: commonBaseColor, light: commonBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeCommonHeaderBackground', 'Common ancestor header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCommonContentBackground = registerColor('merge.commonContentBackground', transparent(mergeCommonHeaderBackground, contentTransparency), nls.localize('mergeCommonContentBackground', 'Common ancestor content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeBorder = registerColor('merge.border', { dark: null, light: null, hcDark: '#C3DF6F', hcLight: '#007ACC' }, nls.localize('mergeBorder', 'Border color on headers and the splitter in inline merge-conflicts.'));\nexport const overviewRulerCurrentContentForeground = registerColor('editorOverviewRuler.currentContentForeground', { dark: transparent(mergeCurrentHeaderBackground, rulerTransparency), light: transparent(mergeCurrentHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('overviewRulerCurrentContentForeground', 'Current overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerIncomingContentForeground = registerColor('editorOverviewRuler.incomingContentForeground', { dark: transparent(mergeIncomingHeaderBackground, rulerTransparency), light: transparent(mergeIncomingHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('overviewRulerIncomingContentForeground', 'Incoming overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerCommonContentForeground = registerColor('editorOverviewRuler.commonContentForeground', { dark: transparent(mergeCommonHeaderBackground, rulerTransparency), light: transparent(mergeCommonHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('overviewRulerCommonContentForeground', 'Common ancestor overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerFindMatchForeground = registerColor('editorOverviewRuler.findMatchForeground', { dark: '#d186167e', light: '#d186167e', hcDark: '#AB5A00', hcLight: '#AB5A00' }, nls.localize('overviewRulerFindMatchForeground', 'Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const overviewRulerSelectionHighlightForeground = registerColor('editorOverviewRuler.selectionHighlightForeground', '#A0A0A0CC', nls.localize('overviewRulerSelectionHighlightForeground', 'Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\n// ----- problems\nexport const problemsErrorIconForeground = registerColor('problemsErrorIcon.foreground', editorErrorForeground, nls.localize('problemsErrorIconForeground', \"The color used for the problems error icon.\"));\nexport const problemsWarningIconForeground = registerColor('problemsWarningIcon.foreground', editorWarningForeground, nls.localize('problemsWarningIconForeground', \"The color used for the problems warning icon.\"));\nexport const problemsInfoIconForeground = registerColor('problemsInfoIcon.foreground', editorInfoForeground, nls.localize('problemsInfoIconForeground', \"The color used for the problems info icon.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color, RGBA } from '../../../../base/common/color.js';\nimport { registerColor, transparent } from '../colorUtils.js';\n// Import the colors we need\nimport { editorInfoForeground, editorWarningForeground, editorWarningBorder, editorInfoBorder } from './editorColors.js';\nimport { scrollbarSliderBackground, scrollbarSliderHoverBackground, scrollbarSliderActiveBackground } from './miscColors.js';\nexport const minimapFindMatch = registerColor('minimap.findMatchHighlight', { light: '#d18616', dark: '#d18616', hcDark: '#AB5A00', hcLight: '#0F4A85' }, nls.localize('minimapFindMatchHighlight', 'Minimap marker color for find matches.'), true);\nexport const minimapSelectionOccurrenceHighlight = registerColor('minimap.selectionOccurrenceHighlight', { light: '#c9c9c9', dark: '#676767', hcDark: '#ffffff', hcLight: '#0F4A85' }, nls.localize('minimapSelectionOccurrenceHighlight', 'Minimap marker color for repeating editor selections.'), true);\nexport const minimapSelection = registerColor('minimap.selectionHighlight', { light: '#ADD6FF', dark: '#264F78', hcDark: '#ffffff', hcLight: '#0F4A85' }, nls.localize('minimapSelectionHighlight', 'Minimap marker color for the editor selection.'), true);\nexport const minimapInfo = registerColor('minimap.infoHighlight', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: editorInfoBorder, hcLight: editorInfoBorder }, nls.localize('minimapInfo', 'Minimap marker color for infos.'));\nexport const minimapWarning = registerColor('minimap.warningHighlight', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningBorder, hcLight: editorWarningBorder }, nls.localize('overviewRuleWarning', 'Minimap marker color for warnings.'));\nexport const minimapError = registerColor('minimap.errorHighlight', { dark: new Color(new RGBA(255, 18, 18, 0.7)), light: new Color(new RGBA(255, 18, 18, 0.7)), hcDark: new Color(new RGBA(255, 50, 50, 1)), hcLight: '#B5200D' }, nls.localize('minimapError', 'Minimap marker color for errors.'));\nexport const minimapBackground = registerColor('minimap.background', null, nls.localize('minimapBackground', \"Minimap background color.\"));\nexport const minimapForegroundOpacity = registerColor('minimap.foregroundOpacity', Color.fromHex('#000f'), nls.localize('minimapForegroundOpacity', 'Opacity of foreground elements rendered in the minimap. For example, \"#000000c0\" will render the elements with 75% opacity.'));\nexport const minimapSliderBackground = registerColor('minimapSlider.background', transparent(scrollbarSliderBackground, 0.5), nls.localize('minimapSliderBackground', \"Minimap slider background color.\"));\nexport const minimapSliderHoverBackground = registerColor('minimapSlider.hoverBackground', transparent(scrollbarSliderHoverBackground, 0.5), nls.localize('minimapSliderHoverBackground', \"Minimap slider background color when hovering.\"));\nexport const minimapSliderActiveBackground = registerColor('minimapSlider.activeBackground', transparent(scrollbarSliderActiveBackground, 0.5), nls.localize('minimapSliderActiveBackground', \"Minimap slider background color when clicked on.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\nimport { registerColor, transparent } from '../colorUtils.js';\nimport { foreground } from './baseColors.js';\nimport { editorErrorForeground, editorInfoForeground, editorWarningForeground } from './editorColors.js';\nimport { minimapFindMatch } from './minimapColors.js';\nexport const chartsForeground = registerColor('charts.foreground', foreground, nls.localize('chartsForeground', \"The foreground color used in charts.\"));\nexport const chartsLines = registerColor('charts.lines', transparent(foreground, .5), nls.localize('chartsLines', \"The color used for horizontal lines in charts.\"));\nexport const chartsRed = registerColor('charts.red', editorErrorForeground, nls.localize('chartsRed', \"The red color used in chart visualizations.\"));\nexport const chartsBlue = registerColor('charts.blue', editorInfoForeground, nls.localize('chartsBlue', \"The blue color used in chart visualizations.\"));\nexport const chartsYellow = registerColor('charts.yellow', editorWarningForeground, nls.localize('chartsYellow', \"The yellow color used in chart visualizations.\"));\nexport const chartsOrange = registerColor('charts.orange', minimapFindMatch, nls.localize('chartsOrange', \"The orange color used in chart visualizations.\"));\nexport const chartsGreen = registerColor('charts.green', { dark: '#89D185', light: '#388A34', hcDark: '#89D185', hcLight: '#374e06' }, nls.localize('chartsGreen', \"The green color used in chart visualizations.\"));\nexport const chartsPurple = registerColor('charts.purple', { dark: '#B180D7', light: '#652D90', hcDark: '#B180D7', hcLight: '#652D90' }, nls.localize('chartsPurple', \"The purple color used in chart visualizations.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color, RGBA } from '../../../../base/common/color.js';\nimport { registerColor, transparent, lighten, darken } from '../colorUtils.js';\n// Import the colors we need\nimport { foreground, contrastBorder, focusBorder, iconForeground } from './baseColors.js';\nimport { editorWidgetBackground } from './editorColors.js';\n// ----- input\nexport const inputBackground = registerColor('input.background', { dark: '#3C3C3C', light: Color.white, hcDark: Color.black, hcLight: Color.white }, nls.localize('inputBoxBackground', \"Input box background.\"));\nexport const inputForeground = registerColor('input.foreground', foreground, nls.localize('inputBoxForeground', \"Input box foreground.\"));\nexport const inputBorder = registerColor('input.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputBoxBorder', \"Input box border.\"));\nexport const inputActiveOptionBorder = registerColor('inputOption.activeBorder', { dark: '#007ACC', light: '#007ACC', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputBoxActiveOptionBorder', \"Border color of activated options in input fields.\"));\nexport const inputActiveOptionHoverBackground = registerColor('inputOption.hoverBackground', { dark: '#5a5d5e80', light: '#b8b8b850', hcDark: null, hcLight: null }, nls.localize('inputOption.hoverBackground', \"Background color of activated options in input fields.\"));\nexport const inputActiveOptionBackground = registerColor('inputOption.activeBackground', { dark: transparent(focusBorder, 0.4), light: transparent(focusBorder, 0.2), hcDark: Color.transparent, hcLight: Color.transparent }, nls.localize('inputOption.activeBackground', \"Background hover color of options in input fields.\"));\nexport const inputActiveOptionForeground = registerColor('inputOption.activeForeground', { dark: Color.white, light: Color.black, hcDark: foreground, hcLight: foreground }, nls.localize('inputOption.activeForeground', \"Foreground color of activated options in input fields.\"));\nexport const inputPlaceholderForeground = registerColor('input.placeholderForeground', { light: transparent(foreground, 0.5), dark: transparent(foreground, 0.5), hcDark: transparent(foreground, 0.7), hcLight: transparent(foreground, 0.7) }, nls.localize('inputPlaceholderForeground', \"Input box foreground color for placeholder text.\"));\n// ----- input validation\nexport const inputValidationInfoBackground = registerColor('inputValidation.infoBackground', { dark: '#063B49', light: '#D6ECF2', hcDark: Color.black, hcLight: Color.white }, nls.localize('inputValidationInfoBackground', \"Input validation background color for information severity.\"));\nexport const inputValidationInfoForeground = registerColor('inputValidation.infoForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('inputValidationInfoForeground', \"Input validation foreground color for information severity.\"));\nexport const inputValidationInfoBorder = registerColor('inputValidation.infoBorder', { dark: '#007acc', light: '#007acc', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputValidationInfoBorder', \"Input validation border color for information severity.\"));\nexport const inputValidationWarningBackground = registerColor('inputValidation.warningBackground', { dark: '#352A05', light: '#F6F5D2', hcDark: Color.black, hcLight: Color.white }, nls.localize('inputValidationWarningBackground', \"Input validation background color for warning severity.\"));\nexport const inputValidationWarningForeground = registerColor('inputValidation.warningForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('inputValidationWarningForeground', \"Input validation foreground color for warning severity.\"));\nexport const inputValidationWarningBorder = registerColor('inputValidation.warningBorder', { dark: '#B89500', light: '#B89500', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputValidationWarningBorder', \"Input validation border color for warning severity.\"));\nexport const inputValidationErrorBackground = registerColor('inputValidation.errorBackground', { dark: '#5A1D1D', light: '#F2DEDE', hcDark: Color.black, hcLight: Color.white }, nls.localize('inputValidationErrorBackground', \"Input validation background color for error severity.\"));\nexport const inputValidationErrorForeground = registerColor('inputValidation.errorForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('inputValidationErrorForeground', \"Input validation foreground color for error severity.\"));\nexport const inputValidationErrorBorder = registerColor('inputValidation.errorBorder', { dark: '#BE1100', light: '#BE1100', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputValidationErrorBorder', \"Input validation border color for error severity.\"));\n// ----- select\nexport const selectBackground = registerColor('dropdown.background', { dark: '#3C3C3C', light: Color.white, hcDark: Color.black, hcLight: Color.white }, nls.localize('dropdownBackground', \"Dropdown background.\"));\nexport const selectListBackground = registerColor('dropdown.listBackground', { dark: null, light: null, hcDark: Color.black, hcLight: Color.white }, nls.localize('dropdownListBackground', \"Dropdown list background.\"));\nexport const selectForeground = registerColor('dropdown.foreground', { dark: '#F0F0F0', light: foreground, hcDark: Color.white, hcLight: foreground }, nls.localize('dropdownForeground', \"Dropdown foreground.\"));\nexport const selectBorder = registerColor('dropdown.border', { dark: selectBackground, light: '#CECECE', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('dropdownBorder', \"Dropdown border.\"));\n// ------ button\nexport const buttonForeground = registerColor('button.foreground', Color.white, nls.localize('buttonForeground', \"Button foreground color.\"));\nexport const buttonSeparator = registerColor('button.separator', transparent(buttonForeground, .4), nls.localize('buttonSeparator', \"Button separator color.\"));\nexport const buttonBackground = registerColor('button.background', { dark: '#0E639C', light: '#007ACC', hcDark: null, hcLight: '#0F4A85' }, nls.localize('buttonBackground', \"Button background color.\"));\nexport const buttonHoverBackground = registerColor('button.hoverBackground', { dark: lighten(buttonBackground, 0.2), light: darken(buttonBackground, 0.2), hcDark: buttonBackground, hcLight: buttonBackground }, nls.localize('buttonHoverBackground', \"Button background color when hovering.\"));\nexport const buttonBorder = registerColor('button.border', contrastBorder, nls.localize('buttonBorder', \"Button border color.\"));\nexport const buttonSecondaryForeground = registerColor('button.secondaryForeground', { dark: Color.white, light: Color.white, hcDark: Color.white, hcLight: foreground }, nls.localize('buttonSecondaryForeground', \"Secondary button foreground color.\"));\nexport const buttonSecondaryBackground = registerColor('button.secondaryBackground', { dark: '#3A3D41', light: '#5F6A79', hcDark: null, hcLight: Color.white }, nls.localize('buttonSecondaryBackground', \"Secondary button background color.\"));\nexport const buttonSecondaryHoverBackground = registerColor('button.secondaryHoverBackground', { dark: lighten(buttonSecondaryBackground, 0.2), light: darken(buttonSecondaryBackground, 0.2), hcDark: null, hcLight: null }, nls.localize('buttonSecondaryHoverBackground', \"Secondary button background color when hovering.\"));\n// ------ radio\nexport const radioActiveForeground = registerColor('radio.activeForeground', inputActiveOptionForeground, nls.localize('radioActiveForeground', \"Foreground color of active radio option.\"));\nexport const radioActiveBackground = registerColor('radio.activeBackground', inputActiveOptionBackground, nls.localize('radioBackground', \"Background color of active radio option.\"));\nexport const radioActiveBorder = registerColor('radio.activeBorder', inputActiveOptionBorder, nls.localize('radioActiveBorder', \"Border color of the active radio option.\"));\nexport const radioInactiveForeground = registerColor('radio.inactiveForeground', null, nls.localize('radioInactiveForeground', \"Foreground color of inactive radio option.\"));\nexport const radioInactiveBackground = registerColor('radio.inactiveBackground', null, nls.localize('radioInactiveBackground', \"Background color of inactive radio option.\"));\nexport const radioInactiveBorder = registerColor('radio.inactiveBorder', { light: transparent(radioActiveForeground, .2), dark: transparent(radioActiveForeground, .2), hcDark: transparent(radioActiveForeground, .4), hcLight: transparent(radioActiveForeground, .2) }, nls.localize('radioInactiveBorder', \"Border color of the inactive radio option.\"));\nexport const radioInactiveHoverBackground = registerColor('radio.inactiveHoverBackground', inputActiveOptionHoverBackground, nls.localize('radioHoverBackground', \"Background color of inactive active radio option when hovering.\"));\n// ------ checkbox\nexport const checkboxBackground = registerColor('checkbox.background', selectBackground, nls.localize('checkbox.background', \"Background color of checkbox widget.\"));\nexport const checkboxSelectBackground = registerColor('checkbox.selectBackground', editorWidgetBackground, nls.localize('checkbox.select.background', \"Background color of checkbox widget when the element it's in is selected.\"));\nexport const checkboxForeground = registerColor('checkbox.foreground', selectForeground, nls.localize('checkbox.foreground', \"Foreground color of checkbox widget.\"));\nexport const checkboxBorder = registerColor('checkbox.border', selectBorder, nls.localize('checkbox.border', \"Border color of checkbox widget.\"));\nexport const checkboxSelectBorder = registerColor('checkbox.selectBorder', iconForeground, nls.localize('checkbox.select.border', \"Border color of checkbox widget when the element it's in is selected.\"));\n// ------ keybinding label\nexport const keybindingLabelBackground = registerColor('keybindingLabel.background', { dark: new Color(new RGBA(128, 128, 128, 0.17)), light: new Color(new RGBA(221, 221, 221, 0.4)), hcDark: Color.transparent, hcLight: Color.transparent }, nls.localize('keybindingLabelBackground', \"Keybinding label background color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelForeground = registerColor('keybindingLabel.foreground', { dark: Color.fromHex('#CCCCCC'), light: Color.fromHex('#555555'), hcDark: Color.white, hcLight: foreground }, nls.localize('keybindingLabelForeground', \"Keybinding label foreground color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelBorder = registerColor('keybindingLabel.border', { dark: new Color(new RGBA(51, 51, 51, 0.6)), light: new Color(new RGBA(204, 204, 204, 0.4)), hcDark: new Color(new RGBA(111, 195, 223)), hcLight: contrastBorder }, nls.localize('keybindingLabelBorder', \"Keybinding label border color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelBottomBorder = registerColor('keybindingLabel.bottomBorder', { dark: new Color(new RGBA(68, 68, 68, 0.6)), light: new Color(new RGBA(187, 187, 187, 0.4)), hcDark: new Color(new RGBA(111, 195, 223)), hcLight: foreground }, nls.localize('keybindingLabelBottomBorder', \"Keybinding label border bottom color. The keybinding label is used to represent a keyboard shortcut.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color } from '../../../../base/common/color.js';\nimport { registerColor, darken, lighten, transparent, ifDefinedThenElse } from '../colorUtils.js';\n// Import the colors we need\nimport { foreground, contrastBorder, activeContrastBorder, focusBorder, iconForeground } from './baseColors.js';\nimport { editorWidgetBackground, editorFindMatchHighlightBorder, editorFindMatchHighlight, widgetShadow, editorWidgetForeground } from './editorColors.js';\nexport const listFocusBackground = registerColor('list.focusBackground', null, nls.localize('listFocusBackground', \"List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusForeground = registerColor('list.focusForeground', null, nls.localize('listFocusForeground', \"List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusOutline = registerColor('list.focusOutline', { dark: focusBorder, light: focusBorder, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('listFocusOutline', \"List/Tree outline color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusAndSelectionOutline = registerColor('list.focusAndSelectionOutline', null, nls.localize('listFocusAndSelectionOutline', \"List/Tree outline color for the focused item when the list/tree is active and selected. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionBackground = registerColor('list.activeSelectionBackground', { dark: '#04395E', light: '#0060C0', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listActiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionForeground = registerColor('list.activeSelectionForeground', { dark: Color.white, light: Color.white, hcDark: null, hcLight: null }, nls.localize('listActiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionIconForeground = registerColor('list.activeSelectionIconForeground', null, nls.localize('listActiveSelectionIconForeground', \"List/Tree icon foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionBackground = registerColor('list.inactiveSelectionBackground', { dark: '#37373D', light: '#E4E6F1', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listInactiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionForeground = registerColor('list.inactiveSelectionForeground', null, nls.localize('listInactiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionIconForeground = registerColor('list.inactiveSelectionIconForeground', null, nls.localize('listInactiveSelectionIconForeground', \"List/Tree icon foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveFocusBackground = registerColor('list.inactiveFocusBackground', null, nls.localize('listInactiveFocusBackground', \"List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveFocusOutline = registerColor('list.inactiveFocusOutline', null, nls.localize('listInactiveFocusOutline', \"List/Tree outline color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listHoverBackground = registerColor('list.hoverBackground', { dark: '#2A2D2E', light: '#F0F0F0', hcDark: Color.white.transparent(0.1), hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listHoverBackground', \"List/Tree background when hovering over items using the mouse.\"));\nexport const listHoverForeground = registerColor('list.hoverForeground', null, nls.localize('listHoverForeground', \"List/Tree foreground when hovering over items using the mouse.\"));\nexport const listDropOverBackground = registerColor('list.dropBackground', { dark: '#062F4A', light: '#D6EBFF', hcDark: null, hcLight: null }, nls.localize('listDropBackground', \"List/Tree drag and drop background when moving items over other items when using the mouse.\"));\nexport const listDropBetweenBackground = registerColor('list.dropBetweenBackground', { dark: iconForeground, light: iconForeground, hcDark: null, hcLight: null }, nls.localize('listDropBetweenBackground', \"List/Tree drag and drop border color when moving items between items when using the mouse.\"));\nexport const listHighlightForeground = registerColor('list.highlightForeground', { dark: '#2AAAFF', light: '#0066BF', hcDark: focusBorder, hcLight: focusBorder }, nls.localize('highlight', 'List/Tree foreground color of the match highlights when searching inside the list/tree.'));\nexport const listFocusHighlightForeground = registerColor('list.focusHighlightForeground', { dark: listHighlightForeground, light: ifDefinedThenElse(listActiveSelectionBackground, listHighlightForeground, '#BBE7FF'), hcDark: listHighlightForeground, hcLight: listHighlightForeground }, nls.localize('listFocusHighlightForeground', 'List/Tree foreground color of the match highlights on actively focused items when searching inside the list/tree.'));\nexport const listInvalidItemForeground = registerColor('list.invalidItemForeground', { dark: '#B89500', light: '#B89500', hcDark: '#B89500', hcLight: '#B5200D' }, nls.localize('invalidItemForeground', 'List/Tree foreground color for invalid items, for example an unresolved root in explorer.'));\nexport const listErrorForeground = registerColor('list.errorForeground', { dark: '#F88070', light: '#B01011', hcDark: null, hcLight: null }, nls.localize('listErrorForeground', 'Foreground color of list items containing errors.'));\nexport const listWarningForeground = registerColor('list.warningForeground', { dark: '#CCA700', light: '#855F00', hcDark: null, hcLight: null }, nls.localize('listWarningForeground', 'Foreground color of list items containing warnings.'));\nexport const listFilterWidgetBackground = registerColor('listFilterWidget.background', { light: darken(editorWidgetBackground, 0), dark: lighten(editorWidgetBackground, 0), hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('listFilterWidgetBackground', 'Background color of the type filter widget in lists and trees.'));\nexport const listFilterWidgetOutline = registerColor('listFilterWidget.outline', { dark: Color.transparent, light: Color.transparent, hcDark: '#f38518', hcLight: '#007ACC' }, nls.localize('listFilterWidgetOutline', 'Outline color of the type filter widget in lists and trees.'));\nexport const listFilterWidgetNoMatchesOutline = registerColor('listFilterWidget.noMatchesOutline', { dark: '#BE1100', light: '#BE1100', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('listFilterWidgetNoMatchesOutline', 'Outline color of the type filter widget in lists and trees, when there are no matches.'));\nexport const listFilterWidgetShadow = registerColor('listFilterWidget.shadow', widgetShadow, nls.localize('listFilterWidgetShadow', 'Shadow color of the type filter widget in lists and trees.'));\nexport const listFilterMatchHighlight = registerColor('list.filterMatchBackground', { dark: editorFindMatchHighlight, light: editorFindMatchHighlight, hcDark: null, hcLight: null }, nls.localize('listFilterMatchHighlight', 'Background color of the filtered match.'));\nexport const listFilterMatchHighlightBorder = registerColor('list.filterMatchBorder', { dark: editorFindMatchHighlightBorder, light: editorFindMatchHighlightBorder, hcDark: contrastBorder, hcLight: activeContrastBorder }, nls.localize('listFilterMatchHighlightBorder', 'Border color of the filtered match.'));\nexport const listDeemphasizedForeground = registerColor('list.deemphasizedForeground', { dark: '#8C8C8C', light: '#8E8E90', hcDark: '#A7A8A9', hcLight: '#666666' }, nls.localize('listDeemphasizedForeground', \"List/Tree foreground color for items that are deemphasized.\"));\n// ------ tree\nexport const treeIndentGuidesStroke = registerColor('tree.indentGuidesStroke', { dark: '#585858', light: '#a9a9a9', hcDark: '#a9a9a9', hcLight: '#a5a5a5' }, nls.localize('treeIndentGuidesStroke', \"Tree stroke color for the indentation guides.\"));\nexport const treeInactiveIndentGuidesStroke = registerColor('tree.inactiveIndentGuidesStroke', transparent(treeIndentGuidesStroke, 0.4), nls.localize('treeInactiveIndentGuidesStroke', \"Tree stroke color for the indentation guides that are not active.\"));\n// ------ table\nexport const tableColumnsBorder = registerColor('tree.tableColumnsBorder', { dark: '#CCCCCC20', light: '#61616120', hcDark: null, hcLight: null }, nls.localize('tableColumnsBorder', \"Table border color between columns.\"));\nexport const tableOddRowsBackgroundColor = registerColor('tree.tableOddRowsBackground', { dark: transparent(foreground, 0.04), light: transparent(foreground, 0.04), hcDark: null, hcLight: null }, nls.localize('tableOddRowsBackgroundColor', \"Background color for odd table rows.\"));\n// ------ action list\nexport const editorActionListBackground = registerColor('editorActionList.background', editorWidgetBackground, nls.localize('editorActionListBackground', \"Action List background color.\"));\nexport const editorActionListForeground = registerColor('editorActionList.foreground', editorWidgetForeground, nls.localize('editorActionListForeground', \"Action List foreground color.\"));\nexport const editorActionListFocusForeground = registerColor('editorActionList.focusForeground', listActiveSelectionForeground, nls.localize('editorActionListFocusForeground', \"Action List foreground color for the focused item.\"));\nexport const editorActionListFocusBackground = registerColor('editorActionList.focusBackground', listActiveSelectionBackground, nls.localize('editorActionListFocusBackground', \"Action List background color for the focused item.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { registerColor } from '../colorUtils.js';\n// Import the colors we need\nimport { contrastBorder, activeContrastBorder } from './baseColors.js';\nimport { selectForeground, selectBackground } from './inputColors.js';\nimport { listActiveSelectionBackground, listActiveSelectionForeground } from './listColors.js';\nexport const menuBorder = registerColor('menu.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('menuBorder', \"Border color of menus.\"));\nexport const menuForeground = registerColor('menu.foreground', selectForeground, nls.localize('menuForeground', \"Foreground color of menu items.\"));\nexport const menuBackground = registerColor('menu.background', selectBackground, nls.localize('menuBackground', \"Background color of menu items.\"));\nexport const menuSelectionForeground = registerColor('menu.selectionForeground', listActiveSelectionForeground, nls.localize('menuSelectionForeground', \"Foreground color of the selected menu item in menus.\"));\nexport const menuSelectionBackground = registerColor('menu.selectionBackground', listActiveSelectionBackground, nls.localize('menuSelectionBackground', \"Background color of the selected menu item in menus.\"));\nexport const menuSelectionBorder = registerColor('menu.selectionBorder', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('menuSelectionBorder', \"Border color of the selected menu item in menus.\"));\nexport const menuSeparatorBackground = registerColor('menu.separatorBackground', { dark: '#606060', light: '#D4D4D4', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('menuSeparatorBackground', \"Color of a separator menu item in menus.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color, RGBA } from '../../../../base/common/color.js';\nimport { registerColor, oneOf } from '../colorUtils.js';\n// Import the colors we need\nimport { editorWidgetBackground, editorWidgetForeground } from './editorColors.js';\nimport { listActiveSelectionBackground, listActiveSelectionForeground, listActiveSelectionIconForeground } from './listColors.js';\nexport const quickInputBackground = registerColor('quickInput.background', editorWidgetBackground, nls.localize('pickerBackground', \"Quick picker background color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const quickInputForeground = registerColor('quickInput.foreground', editorWidgetForeground, nls.localize('pickerForeground', \"Quick picker foreground color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const quickInputTitleBackground = registerColor('quickInputTitle.background', { dark: new Color(new RGBA(255, 255, 255, 0.105)), light: new Color(new RGBA(0, 0, 0, 0.06)), hcDark: '#000000', hcLight: Color.white }, nls.localize('pickerTitleBackground', \"Quick picker title background color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const pickerGroupForeground = registerColor('pickerGroup.foreground', { dark: '#3794FF', light: '#0066BF', hcDark: Color.white, hcLight: '#0F4A85' }, nls.localize('pickerGroupForeground', \"Quick picker color for grouping labels.\"));\nexport const pickerGroupBorder = registerColor('pickerGroup.border', { dark: '#3F3F46', light: '#CCCEDB', hcDark: Color.white, hcLight: '#0F4A85' }, nls.localize('pickerGroupBorder', \"Quick picker color for grouping borders.\"));\nexport const _deprecatedQuickInputListFocusBackground = registerColor('quickInput.list.focusBackground', null, '', undefined, nls.localize('quickInput.list.focusBackground deprecation', \"Please use quickInputList.focusBackground instead\"));\nexport const quickInputListFocusForeground = registerColor('quickInputList.focusForeground', listActiveSelectionForeground, nls.localize('quickInput.listFocusForeground', \"Quick picker foreground color for the focused item.\"));\nexport const quickInputListFocusIconForeground = registerColor('quickInputList.focusIconForeground', listActiveSelectionIconForeground, nls.localize('quickInput.listFocusIconForeground', \"Quick picker icon foreground color for the focused item.\"));\nexport const quickInputListFocusBackground = registerColor('quickInputList.focusBackground', { dark: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground), light: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground), hcDark: null, hcLight: null }, nls.localize('quickInput.listFocusBackground', \"Quick picker background color for the focused item.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { registerColor, transparent } from '../colorUtils.js';\n// Import the colors we need\nimport { foreground } from './baseColors.js';\nimport { editorFindMatchHighlight, editorFindMatchHighlightBorder } from './editorColors.js';\nexport const searchResultsInfoForeground = registerColor('search.resultsInfoForeground', { light: foreground, dark: transparent(foreground, 0.65), hcDark: foreground, hcLight: foreground }, nls.localize('search.resultsInfoForeground', \"Color of the text in the search viewlet's completion message.\"));\n// ----- search editor (Distinct from normal editor find match to allow for better differentiation)\nexport const searchEditorFindMatch = registerColor('searchEditor.findMatchBackground', { light: transparent(editorFindMatchHighlight, 0.66), dark: transparent(editorFindMatchHighlight, 0.66), hcDark: editorFindMatchHighlight, hcLight: editorFindMatchHighlight }, nls.localize('searchEditor.queryMatch', \"Color of the Search Editor query matches.\"));\nexport const searchEditorFindMatchBorder = registerColor('searchEditor.findMatchBorder', { light: transparent(editorFindMatchHighlightBorder, 0.66), dark: transparent(editorFindMatchHighlightBorder, 0.66), hcDark: editorFindMatchHighlightBorder, hcLight: editorFindMatchHighlightBorder }, nls.localize('searchEditor.editorFindMatchBorder', \"Border color of the Search Editor query matches.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { assertNever } from '../../../base/common/assert.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Color } from '../../../base/common/color.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport * as platform from '../../registry/common/platform.js';\nimport * as nls from '../../../nls.js';\n/**\n * Returns the css variable name for the given color identifier. Dots (`.`) are replaced with hyphens (`-`) and\n * everything is prefixed with `--vscode-`.\n *\n * @sample `editorSuggestWidget.background` is `--vscode-editorSuggestWidget-background`.\n */\nexport function asCssVariableName(colorIdent) {\n    return `--vscode-${colorIdent.replace(/\\./g, '-')}`;\n}\nexport function asCssVariable(color) {\n    return `var(${asCssVariableName(color)})`;\n}\nexport function asCssVariableWithDefault(color, defaultCssValue) {\n    return `var(${asCssVariableName(color)}, ${defaultCssValue})`;\n}\nexport function isColorDefaults(value) {\n    return value !== null && typeof value === 'object' && 'light' in value && 'dark' in value;\n}\n// color registry\nexport const Extensions = {\n    ColorContribution: 'base.contributions.colors'\n};\nexport const DEFAULT_COLOR_CONFIG_VALUE = 'default';\nclass ColorRegistry {\n    constructor() {\n        this._onDidChangeSchema = new Emitter();\n        this.onDidChangeSchema = this._onDidChangeSchema.event;\n        this.colorSchema = { type: 'object', properties: {} };\n        this.colorReferenceSchema = { type: 'string', enum: [], enumDescriptions: [] };\n        this.colorsById = {};\n    }\n    registerColor(id, defaults, description, needsTransparency = false, deprecationMessage) {\n        const colorContribution = { id, description, defaults, needsTransparency, deprecationMessage };\n        this.colorsById[id] = colorContribution;\n        const propertySchema = { type: 'string', format: 'color-hex', defaultSnippets: [{ body: '${1:#ff0000}' }] };\n        if (deprecationMessage) {\n            propertySchema.deprecationMessage = deprecationMessage;\n        }\n        if (needsTransparency) {\n            propertySchema.pattern = '^#(?:(?<rgba>[0-9a-fA-f]{3}[0-9a-eA-E])|(?:[0-9a-fA-F]{6}(?:(?![fF]{2})(?:[0-9a-fA-F]{2}))))?$';\n            propertySchema.patternErrorMessage = nls.localize('transparecyRequired', 'This color must be transparent or it will obscure content');\n        }\n        this.colorSchema.properties[id] = {\n            description,\n            oneOf: [\n                propertySchema,\n                { type: 'string', const: DEFAULT_COLOR_CONFIG_VALUE, description: nls.localize('useDefault', 'Use the default color.') }\n            ]\n        };\n        this.colorReferenceSchema.enum.push(id);\n        this.colorReferenceSchema.enumDescriptions.push(description);\n        this._onDidChangeSchema.fire();\n        return id;\n    }\n    getColors() {\n        return Object.keys(this.colorsById).map(id => this.colorsById[id]);\n    }\n    resolveDefaultColor(id, theme) {\n        const colorDesc = this.colorsById[id];\n        if (colorDesc?.defaults) {\n            const colorValue = isColorDefaults(colorDesc.defaults) ? colorDesc.defaults[theme.type] : colorDesc.defaults;\n            return resolveColorValue(colorValue, theme);\n        }\n        return undefined;\n    }\n    getColorSchema() {\n        return this.colorSchema;\n    }\n    toString() {\n        const sorter = (a, b) => {\n            const cat1 = a.indexOf('.') === -1 ? 0 : 1;\n            const cat2 = b.indexOf('.') === -1 ? 0 : 1;\n            if (cat1 !== cat2) {\n                return cat1 - cat2;\n            }\n            return a.localeCompare(b);\n        };\n        return Object.keys(this.colorsById).sort(sorter).map(k => `- \\`${k}\\`: ${this.colorsById[k].description}`).join('\\n');\n    }\n}\nconst colorRegistry = new ColorRegistry();\nplatform.Registry.add(Extensions.ColorContribution, colorRegistry);\nexport function registerColor(id, defaults, description, needsTransparency, deprecationMessage) {\n    return colorRegistry.registerColor(id, defaults, description, needsTransparency, deprecationMessage);\n}\n// ----- color functions\nexport function executeTransform(transform, theme) {\n    switch (transform.op) {\n        case 0 /* ColorTransformType.Darken */:\n            return resolveColorValue(transform.value, theme)?.darken(transform.factor);\n        case 1 /* ColorTransformType.Lighten */:\n            return resolveColorValue(transform.value, theme)?.lighten(transform.factor);\n        case 2 /* ColorTransformType.Transparent */:\n            return resolveColorValue(transform.value, theme)?.transparent(transform.factor);\n        case 3 /* ColorTransformType.Opaque */: {\n            const backgroundColor = resolveColorValue(transform.background, theme);\n            if (!backgroundColor) {\n                return resolveColorValue(transform.value, theme);\n            }\n            return resolveColorValue(transform.value, theme)?.makeOpaque(backgroundColor);\n        }\n        case 4 /* ColorTransformType.OneOf */:\n            for (const candidate of transform.values) {\n                const color = resolveColorValue(candidate, theme);\n                if (color) {\n                    return color;\n                }\n            }\n            return undefined;\n        case 6 /* ColorTransformType.IfDefinedThenElse */:\n            return resolveColorValue(theme.defines(transform.if) ? transform.then : transform.else, theme);\n        case 5 /* ColorTransformType.LessProminent */: {\n            const from = resolveColorValue(transform.value, theme);\n            if (!from) {\n                return undefined;\n            }\n            const backgroundColor = resolveColorValue(transform.background, theme);\n            if (!backgroundColor) {\n                return from.transparent(transform.factor * transform.transparency);\n            }\n            return from.isDarkerThan(backgroundColor)\n                ? Color.getLighterColor(from, backgroundColor, transform.factor).transparent(transform.transparency)\n                : Color.getDarkerColor(from, backgroundColor, transform.factor).transparent(transform.transparency);\n        }\n        default:\n            throw assertNever(transform);\n    }\n}\nexport function darken(colorValue, factor) {\n    return { op: 0 /* ColorTransformType.Darken */, value: colorValue, factor };\n}\nexport function lighten(colorValue, factor) {\n    return { op: 1 /* ColorTransformType.Lighten */, value: colorValue, factor };\n}\nexport function transparent(colorValue, factor) {\n    return { op: 2 /* ColorTransformType.Transparent */, value: colorValue, factor };\n}\nexport function oneOf(...colorValues) {\n    return { op: 4 /* ColorTransformType.OneOf */, values: colorValues };\n}\nexport function ifDefinedThenElse(ifArg, thenArg, elseArg) {\n    return { op: 6 /* ColorTransformType.IfDefinedThenElse */, if: ifArg, then: thenArg, else: elseArg };\n}\nexport function lessProminent(colorValue, backgroundColorValue, factor, transparency) {\n    return { op: 5 /* ColorTransformType.LessProminent */, value: colorValue, background: backgroundColorValue, factor, transparency };\n}\n// ----- implementation\n/**\n * @param colorValue Resolve a color value in the context of a theme\n */\nexport function resolveColorValue(colorValue, theme) {\n    if (colorValue === null) {\n        return undefined;\n    }\n    else if (typeof colorValue === 'string') {\n        if (colorValue[0] === '#') {\n            return Color.fromHex(colorValue);\n        }\n        return theme.getColor(colorValue);\n    }\n    else if (colorValue instanceof Color) {\n        return colorValue;\n    }\n    else if (typeof colorValue === 'object') {\n        return executeTransform(colorValue, theme);\n    }\n    return undefined;\n}\nexport const workbenchColorsSchemaId = 'vscode://schemas/workbench-colors';\nconst schemaRegistry = platform.Registry.as(JSONExtensions.JSONContribution);\nschemaRegistry.registerSchema(workbenchColorsSchemaId, colorRegistry.getColorSchema());\nconst delayer = new RunOnceScheduler(() => schemaRegistry.notifySchemaChanged(workbenchColorsSchemaId), 200);\ncolorRegistry.onDidChangeSchema(() => {\n    if (!delayer.isScheduled()) {\n        delayer.schedule();\n    }\n});\n// setTimeout(_ => console.log(colorRegistry.toString()), 5000);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * Color scheme used by the OS and by color themes.\n */\nexport var ColorScheme;\n(function (ColorScheme) {\n    ColorScheme[\"DARK\"] = \"dark\";\n    ColorScheme[\"LIGHT\"] = \"light\";\n    ColorScheme[\"HIGH_CONTRAST_DARK\"] = \"hcDark\";\n    ColorScheme[\"HIGH_CONTRAST_LIGHT\"] = \"hcLight\";\n})(ColorScheme || (ColorScheme = {}));\nexport function isHighContrast(scheme) {\n    return scheme === ColorScheme.HIGH_CONTRAST_DARK || scheme === ColorScheme.HIGH_CONTRAST_LIGHT;\n}\nexport function isDark(scheme) {\n    return scheme === ColorScheme.DARK || scheme === ColorScheme.HIGH_CONTRAST_DARK;\n}\n","import { Emitter } from '../../../base/common/event.js';\nimport { Disposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport * as platform from '../../registry/common/platform.js';\nimport { ColorScheme } from './theme.js';\nexport const IThemeService = createDecorator('themeService');\nexport function themeColorFromId(id) {\n    return { id };\n}\nexport function getThemeTypeSelector(type) {\n    switch (type) {\n        case ColorScheme.DARK: return 'vs-dark';\n        case ColorScheme.HIGH_CONTRAST_DARK: return 'hc-black';\n        case ColorScheme.HIGH_CONTRAST_LIGHT: return 'hc-light';\n        default: return 'vs';\n    }\n}\n// static theming participant\nexport const Extensions = {\n    ThemingContribution: 'base.contributions.theming'\n};\nclass ThemingRegistry {\n    constructor() {\n        this.themingParticipants = [];\n        this.themingParticipants = [];\n        this.onThemingParticipantAddedEmitter = new Emitter();\n    }\n    onColorThemeChange(participant) {\n        this.themingParticipants.push(participant);\n        this.onThemingParticipantAddedEmitter.fire(participant);\n        return toDisposable(() => {\n            const idx = this.themingParticipants.indexOf(participant);\n            this.themingParticipants.splice(idx, 1);\n        });\n    }\n    getThemingParticipants() {\n        return this.themingParticipants;\n    }\n}\nconst themingRegistry = new ThemingRegistry();\nplatform.Registry.add(Extensions.ThemingContribution, themingRegistry);\nexport function registerThemingParticipant(participant) {\n    return themingRegistry.onColorThemeChange(participant);\n}\n/**\n * Utility base class for all themable components.\n */\nexport class Themable extends Disposable {\n    constructor(themeService) {\n        super();\n        this.themeService = themeService;\n        this.theme = themeService.getColorTheme();\n        // Hook up to theme changes\n        this._register(this.themeService.onDidColorThemeChange(theme => this.onThemeChange(theme)));\n    }\n    onThemeChange(theme) {\n        this.theme = theme;\n        this.updateStyles();\n    }\n    updateStyles() {\n        // Subclasses to override\n    }\n}\n"],"names":["i","t","p","Object","r"],"mappings":"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"}